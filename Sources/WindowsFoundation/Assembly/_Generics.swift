// Generated by swift-winrt
// swiftlint:disable all

import CWindowsFoundation
import WindowsRuntime
import struct Foundation.UUID

extension WindowsFoundationCollections_IIterableProjection {
    public final class IKeyValuePair_String_Object: WinRTProjectionBase<IKeyValuePair_String_Object>, WinRTProjection, WindowsFoundationCollections_IIterableProtocol {
        public typealias SwiftObject = WindowsFoundationCollections_IIterable<WindowsFoundationCollections_IKeyValuePair<Swift.String, WindowsRuntime.IInspectable?>?>
        public typealias COMInterface = CWindowsFoundation.__FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable
        public typealias COMVirtualTable = CWindowsFoundation.__FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectableVtbl

        public static let iid = IID(0xFE2F3D47, 0x5D47, 0x5499, 0x8374, 0x430C7CDA0204)
        public static let runtimeClassName = "Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Object>>"

        // Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Object>>
        public func first() throws -> WindowsFoundationCollections_IIterator<WindowsFoundationCollections_IKeyValuePair<Swift.String, WindowsRuntime.IInspectable?>?>? {
            var _result: UnsafeMutablePointer<__FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable>? = nil
            try HResult.throwIfFailed(comPointer.pointee.lpVtbl.pointee.First(comPointer, &_result))
            return WindowsFoundationCollections_IIteratorProjection.IKeyValuePair_String_Object.toSwift(consuming: &_result)
        }
    }
}

extension WindowsFoundationCollections_IIterableProjection {
    public final class IKeyValuePair_String_String: WinRTProjectionBase<IKeyValuePair_String_String>, WinRTProjection, WindowsFoundationCollections_IIterableProtocol {
        public typealias SwiftObject = WindowsFoundationCollections_IIterable<WindowsFoundationCollections_IKeyValuePair<Swift.String, Swift.String>?>
        public typealias COMInterface = CWindowsFoundation.__FIIterable_1___FIKeyValuePair_2_HSTRING_HSTRING
        public typealias COMVirtualTable = CWindowsFoundation.__FIIterable_1___FIKeyValuePair_2_HSTRING_HSTRINGVtbl

        public static let iid = IID(0xE9BDAAF0, 0xCBF6, 0x5C72, 0xBE90, 0x29CBF3A1319B)
        public static let runtimeClassName = "Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, String>>"

        // Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, String>>
        public func first() throws -> WindowsFoundationCollections_IIterator<WindowsFoundationCollections_IKeyValuePair<Swift.String, Swift.String>?>? {
            var _result: UnsafeMutablePointer<__FIIterator_1___FIKeyValuePair_2_HSTRING_HSTRING>? = nil
            try HResult.throwIfFailed(comPointer.pointee.lpVtbl.pointee.First(comPointer, &_result))
            return WindowsFoundationCollections_IIteratorProjection.IKeyValuePair_String_String.toSwift(consuming: &_result)
        }
    }
}

extension WindowsFoundationCollections_IIteratorProjection {
    public final class IKeyValuePair_String_Object: WinRTProjectionBase<IKeyValuePair_String_Object>, WinRTProjection, WindowsFoundationCollections_IIteratorProtocol {
        public typealias SwiftObject = WindowsFoundationCollections_IIterator<WindowsFoundationCollections_IKeyValuePair<Swift.String, WindowsRuntime.IInspectable?>?>
        public typealias COMInterface = CWindowsFoundation.__FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable
        public typealias COMVirtualTable = CWindowsFoundation.__FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectableVtbl

        public static let iid = IID(0x5DB5FA32, 0x707C, 0x5849, 0xA06B, 0x91C8EB9D10E8)
        public static let runtimeClassName = "Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Object>>"

        // Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Object>>
        public var current: WindowsFoundationCollections_IKeyValuePair<Swift.String, WindowsRuntime.IInspectable?>? {
            get throws {
                var _result: UnsafeMutablePointer<__FIKeyValuePair_2_HSTRING_IInspectable>? = nil
                try HResult.throwIfFailed(comPointer.pointee.lpVtbl.pointee.get_Current(comPointer, &_result))
                return WindowsFoundationCollections_IKeyValuePairProjection.String_Object.toSwift(consuming: &_result)
            }
        }

        public var hasCurrent: Swift.Bool {
            get throws {
                var _result: boolean = 0
                try HResult.throwIfFailed(comPointer.pointee.lpVtbl.pointee.get_HasCurrent(comPointer, &_result))
                return COM.BooleanProjection.toSwift(_result)
            }
        }

        public func moveNext() throws -> Swift.Bool {
            var _result: boolean = 0
            try HResult.throwIfFailed(comPointer.pointee.lpVtbl.pointee.MoveNext(comPointer, &_result))
            return COM.BooleanProjection.toSwift(_result)
        }

        public func getMany(_ items: [WindowsFoundationCollections_IKeyValuePair<Swift.String, WindowsRuntime.IInspectable?>?]) throws -> Swift.UInt32 {
            var items: COM.COMArray<UnsafeMutablePointer<__FIKeyValuePair_2_HSTRING_IInspectable>?> = .null
            defer { WindowsRuntime.WinRTArrayProjection<WindowsFoundationCollections_IKeyValuePairProjection.String_Object>.release(&items) }
            var _result: UINT32 = 0
            try HResult.throwIfFailed(comPointer.pointee.lpVtbl.pointee.GetMany(comPointer, items.count, items.elements, &_result))
            return _result
        }
    }
}

extension WindowsFoundationCollections_IIteratorProjection {
    public final class IKeyValuePair_String_String: WinRTProjectionBase<IKeyValuePair_String_String>, WinRTProjection, WindowsFoundationCollections_IIteratorProtocol {
        public typealias SwiftObject = WindowsFoundationCollections_IIterator<WindowsFoundationCollections_IKeyValuePair<Swift.String, Swift.String>?>
        public typealias COMInterface = CWindowsFoundation.__FIIterator_1___FIKeyValuePair_2_HSTRING_HSTRING
        public typealias COMVirtualTable = CWindowsFoundation.__FIIterator_1___FIKeyValuePair_2_HSTRING_HSTRINGVtbl

        public static let iid = IID(0x05EB86F1, 0x7140, 0x5517, 0xB88D, 0xCBAEBE57E6B1)
        public static let runtimeClassName = "Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<String, String>>"

        // Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<String, String>>
        public var current: WindowsFoundationCollections_IKeyValuePair<Swift.String, Swift.String>? {
            get throws {
                var _result: UnsafeMutablePointer<__FIKeyValuePair_2_HSTRING_HSTRING>? = nil
                try HResult.throwIfFailed(comPointer.pointee.lpVtbl.pointee.get_Current(comPointer, &_result))
                return WindowsFoundationCollections_IKeyValuePairProjection.String_String.toSwift(consuming: &_result)
            }
        }

        public var hasCurrent: Swift.Bool {
            get throws {
                var _result: boolean = 0
                try HResult.throwIfFailed(comPointer.pointee.lpVtbl.pointee.get_HasCurrent(comPointer, &_result))
                return COM.BooleanProjection.toSwift(_result)
            }
        }

        public func moveNext() throws -> Swift.Bool {
            var _result: boolean = 0
            try HResult.throwIfFailed(comPointer.pointee.lpVtbl.pointee.MoveNext(comPointer, &_result))
            return COM.BooleanProjection.toSwift(_result)
        }

        public func getMany(_ items: [WindowsFoundationCollections_IKeyValuePair<Swift.String, Swift.String>?]) throws -> Swift.UInt32 {
            var items: COM.COMArray<UnsafeMutablePointer<__FIKeyValuePair_2_HSTRING_HSTRING>?> = .null
            defer { WindowsRuntime.WinRTArrayProjection<WindowsFoundationCollections_IKeyValuePairProjection.String_String>.release(&items) }
            var _result: UINT32 = 0
            try HResult.throwIfFailed(comPointer.pointee.lpVtbl.pointee.GetMany(comPointer, items.count, items.elements, &_result))
            return _result
        }
    }
}

extension WindowsFoundationCollections_IKeyValuePairProjection {
    public final class String_Object: WinRTProjectionBase<String_Object>, WinRTProjection, WindowsFoundationCollections_IKeyValuePairProtocol {
        public typealias SwiftObject = WindowsFoundationCollections_IKeyValuePair<Swift.String, WindowsRuntime.IInspectable?>
        public typealias COMInterface = CWindowsFoundation.__FIKeyValuePair_2_HSTRING_IInspectable
        public typealias COMVirtualTable = CWindowsFoundation.__FIKeyValuePair_2_HSTRING_IInspectableVtbl

        public static let iid = IID(0x09335560, 0x6C6B, 0x5A26, 0x9348, 0x97B781132B20)
        public static let runtimeClassName = "Windows.Foundation.Collections.IKeyValuePair`2<String, Object>"

        // Windows.Foundation.Collections.IKeyValuePair`2<String, Object>
        public var key: Swift.String {
            get throws {
                var _result: CWindowsFoundation.HSTRING? = nil
                try HResult.throwIfFailed(comPointer.pointee.lpVtbl.pointee.get_Key(comPointer, &_result))
                return WindowsRuntime.HStringProjection.toSwift(consuming: &_result)
            }
        }

        public var value: WindowsRuntime.IInspectable? {
            get throws {
                var _result: IInspectableProjection.COMPointer? = nil
                try HResult.throwIfFailed(comPointer.pointee.lpVtbl.pointee.get_Value(comPointer, &_result))
                return WindowsRuntime.IInspectableProjection.toSwift(consuming: &_result)
            }
        }
    }
}

extension WindowsFoundationCollections_IKeyValuePairProjection {
    public final class String_String: WinRTProjectionBase<String_String>, WinRTProjection, WindowsFoundationCollections_IKeyValuePairProtocol {
        public typealias SwiftObject = WindowsFoundationCollections_IKeyValuePair<Swift.String, Swift.String>
        public typealias COMInterface = CWindowsFoundation.__FIKeyValuePair_2_HSTRING_HSTRING
        public typealias COMVirtualTable = CWindowsFoundation.__FIKeyValuePair_2_HSTRING_HSTRINGVtbl

        public static let iid = IID(0x60310303, 0x49C5, 0x52E6, 0xABC6, 0xA9B36ECCC716)
        public static let runtimeClassName = "Windows.Foundation.Collections.IKeyValuePair`2<String, String>"

        // Windows.Foundation.Collections.IKeyValuePair`2<String, String>
        public var key: Swift.String {
            get throws {
                var _result: CWindowsFoundation.HSTRING? = nil
                try HResult.throwIfFailed(comPointer.pointee.lpVtbl.pointee.get_Key(comPointer, &_result))
                return WindowsRuntime.HStringProjection.toSwift(consuming: &_result)
            }
        }

        public var value: Swift.String {
            get throws {
                var _result: CWindowsFoundation.HSTRING? = nil
                try HResult.throwIfFailed(comPointer.pointee.lpVtbl.pointee.get_Value(comPointer, &_result))
                return WindowsRuntime.HStringProjection.toSwift(consuming: &_result)
            }
        }
    }
}

extension WindowsFoundationCollections_IMapChangedEventArgsProjection {
    public final class String: WinRTProjectionBase<String>, WinRTProjection, WindowsFoundationCollections_IMapChangedEventArgsProtocol {
        public typealias SwiftObject = WindowsFoundationCollections_IMapChangedEventArgs<Swift.String>
        public typealias COMInterface = CWindowsFoundation.__FIMapChangedEventArgs_1_HSTRING
        public typealias COMVirtualTable = CWindowsFoundation.__FIMapChangedEventArgs_1_HSTRINGVtbl

        public static let iid = IID(0x60141EFB, 0xF2F9, 0x5377, 0x96FD, 0xF8C60D9558B5)
        public static let runtimeClassName = "Windows.Foundation.Collections.IMapChangedEventArgs`1<String>"

        // Windows.Foundation.Collections.IMapChangedEventArgs`1<String>
        public var collectionChange: WindowsFoundationCollections_CollectionChange {
            get throws {
                var _result: __x_ABI_CWindows_CFoundation_CCollections_CCollectionChange = WindowsFoundationCollections_CollectionChange.abiDefaultValue
                try HResult.throwIfFailed(comPointer.pointee.lpVtbl.pointee.get_CollectionChange(comPointer, &_result))
                return WindowsFoundationCollections_CollectionChange.toSwift(_result)
            }
        }

        public var key: Swift.String {
            get throws {
                var _result: CWindowsFoundation.HSTRING? = nil
                try HResult.throwIfFailed(comPointer.pointee.lpVtbl.pointee.get_Key(comPointer, &_result))
                return WindowsRuntime.HStringProjection.toSwift(consuming: &_result)
            }
        }
    }
}

extension WindowsFoundationCollections_IMapViewProjection {
    public final class String_Object: WinRTProjectionBase<String_Object>, WinRTProjection, WindowsFoundationCollections_IMapViewProtocol {
        public typealias SwiftObject = WindowsFoundationCollections_IMapView<Swift.String, WindowsRuntime.IInspectable?>
        public typealias COMInterface = CWindowsFoundation.__FIMapView_2_HSTRING_IInspectable
        public typealias COMVirtualTable = CWindowsFoundation.__FIMapView_2_HSTRING_IInspectableVtbl

        public static let iid = IID(0xBB78502A, 0xF79D, 0x54FA, 0x92C9, 0x90C5039FDF7E)
        public static let runtimeClassName = "Windows.Foundation.Collections.IMapView`2<String, Object>"

        public typealias T = WindowsFoundationCollections_IKeyValuePair<Swift.String, WindowsRuntime.IInspectable?>?

        // Windows.Foundation.Collections.IMapView`2<String, Object>
        public var size: Swift.UInt32 {
            get throws {
                var _result: UINT32 = 0
                try HResult.throwIfFailed(comPointer.pointee.lpVtbl.pointee.get_Size(comPointer, &_result))
                return _result
            }
        }

        public func lookup(_ key: Swift.String) throws -> WindowsRuntime.IInspectable? {
            var key = try WindowsRuntime.HStringProjection.toABI(key)
            defer { WindowsRuntime.HStringProjection.release(&key) }
            var _result: IInspectableProjection.COMPointer? = nil
            try HResult.throwIfFailed(comPointer.pointee.lpVtbl.pointee.Lookup(comPointer, key, &_result))
            return WindowsRuntime.IInspectableProjection.toSwift(consuming: &_result)
        }

        public func hasKey(_ key: Swift.String) throws -> Swift.Bool {
            var key = try WindowsRuntime.HStringProjection.toABI(key)
            defer { WindowsRuntime.HStringProjection.release(&key) }
            var _result: boolean = 0
            try HResult.throwIfFailed(comPointer.pointee.lpVtbl.pointee.HasKey(comPointer, key, &_result))
            return COM.BooleanProjection.toSwift(_result)
        }

        public func split(_ first: inout WindowsFoundationCollections_IMapView<Swift.String, WindowsRuntime.IInspectable?>?, _ second: inout WindowsFoundationCollections_IMapView<Swift.String, WindowsRuntime.IInspectable?>?) throws {
            var _first: UnsafeMutablePointer<__FIMapView_2_HSTRING_IInspectable>? = nil
            defer { WindowsFoundationCollections_IMapViewProjection.String_Object.release(&_first) }
            var _second: UnsafeMutablePointer<__FIMapView_2_HSTRING_IInspectable>? = nil
            defer { WindowsFoundationCollections_IMapViewProjection.String_Object.release(&_second) }
            try HResult.throwIfFailed(comPointer.pointee.lpVtbl.pointee.Split(comPointer, &_first, &_second))
            first = WindowsFoundationCollections_IMapViewProjection.String_Object.toSwift(consuming: &_first)
            second = WindowsFoundationCollections_IMapViewProjection.String_Object.toSwift(consuming: &_second)
        }

        // Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Object>>
        private var _iiterable: UnsafeMutablePointer<__FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable>! = nil

        private func _getIIterable() throws -> UnsafeMutablePointer<__FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable> {
            let iid = IID(0xFE2F3D47, 0x5D47, 0x5499, 0x8374, 0x430C7CDA0204)
            _iiterable = try _queryInterfacePointer(iid).cast(to: __FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable.self)
            return _iiterable
        }

        public func first() throws -> WindowsFoundationCollections_IIterator<WindowsFoundationCollections_IKeyValuePair<Swift.String, WindowsRuntime.IInspectable?>?>? {
            let _this = try _getIIterable()
            var _result: UnsafeMutablePointer<__FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable>? = nil
            try HResult.throwIfFailed(_this.pointee.lpVtbl.pointee.First(_this, &_result))
            return WindowsFoundationCollections_IIteratorProjection.IKeyValuePair_String_Object.toSwift(consuming: &_result)
        }

        deinit {
            if let _iiterable { IUnknownPointer.release(_iiterable) }
        }
    }
}

extension WindowsFoundationCollections_IMapViewProjection {
    public final class String_String: WinRTProjectionBase<String_String>, WinRTProjection, WindowsFoundationCollections_IMapViewProtocol {
        public typealias SwiftObject = WindowsFoundationCollections_IMapView<Swift.String, Swift.String>
        public typealias COMInterface = CWindowsFoundation.__FIMapView_2_HSTRING_HSTRING
        public typealias COMVirtualTable = CWindowsFoundation.__FIMapView_2_HSTRING_HSTRINGVtbl

        public static let iid = IID(0xAC7F26F2, 0xFEB7, 0x5B2A, 0x8AC4, 0x345BC62CAEDE)
        public static let runtimeClassName = "Windows.Foundation.Collections.IMapView`2<String, String>"

        public typealias T = WindowsFoundationCollections_IKeyValuePair<Swift.String, Swift.String>?

        // Windows.Foundation.Collections.IMapView`2<String, String>
        public var size: Swift.UInt32 {
            get throws {
                var _result: UINT32 = 0
                try HResult.throwIfFailed(comPointer.pointee.lpVtbl.pointee.get_Size(comPointer, &_result))
                return _result
            }
        }

        public func lookup(_ key: Swift.String) throws -> Swift.String {
            var key = try WindowsRuntime.HStringProjection.toABI(key)
            defer { WindowsRuntime.HStringProjection.release(&key) }
            var _result: CWindowsFoundation.HSTRING? = nil
            try HResult.throwIfFailed(comPointer.pointee.lpVtbl.pointee.Lookup(comPointer, key, &_result))
            return WindowsRuntime.HStringProjection.toSwift(consuming: &_result)
        }

        public func hasKey(_ key: Swift.String) throws -> Swift.Bool {
            var key = try WindowsRuntime.HStringProjection.toABI(key)
            defer { WindowsRuntime.HStringProjection.release(&key) }
            var _result: boolean = 0
            try HResult.throwIfFailed(comPointer.pointee.lpVtbl.pointee.HasKey(comPointer, key, &_result))
            return COM.BooleanProjection.toSwift(_result)
        }

        public func split(_ first: inout WindowsFoundationCollections_IMapView<Swift.String, Swift.String>?, _ second: inout WindowsFoundationCollections_IMapView<Swift.String, Swift.String>?) throws {
            var _first: UnsafeMutablePointer<__FIMapView_2_HSTRING_HSTRING>? = nil
            defer { WindowsFoundationCollections_IMapViewProjection.String_String.release(&_first) }
            var _second: UnsafeMutablePointer<__FIMapView_2_HSTRING_HSTRING>? = nil
            defer { WindowsFoundationCollections_IMapViewProjection.String_String.release(&_second) }
            try HResult.throwIfFailed(comPointer.pointee.lpVtbl.pointee.Split(comPointer, &_first, &_second))
            first = WindowsFoundationCollections_IMapViewProjection.String_String.toSwift(consuming: &_first)
            second = WindowsFoundationCollections_IMapViewProjection.String_String.toSwift(consuming: &_second)
        }

        // Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, String>>
        private var _iiterable: UnsafeMutablePointer<__FIIterable_1___FIKeyValuePair_2_HSTRING_HSTRING>! = nil

        private func _getIIterable() throws -> UnsafeMutablePointer<__FIIterable_1___FIKeyValuePair_2_HSTRING_HSTRING> {
            let iid = IID(0xE9BDAAF0, 0xCBF6, 0x5C72, 0xBE90, 0x29CBF3A1319B)
            _iiterable = try _queryInterfacePointer(iid).cast(to: __FIIterable_1___FIKeyValuePair_2_HSTRING_HSTRING.self)
            return _iiterable
        }

        public func first() throws -> WindowsFoundationCollections_IIterator<WindowsFoundationCollections_IKeyValuePair<Swift.String, Swift.String>?>? {
            let _this = try _getIIterable()
            var _result: UnsafeMutablePointer<__FIIterator_1___FIKeyValuePair_2_HSTRING_HSTRING>? = nil
            try HResult.throwIfFailed(_this.pointee.lpVtbl.pointee.First(_this, &_result))
            return WindowsFoundationCollections_IIteratorProjection.IKeyValuePair_String_String.toSwift(consuming: &_result)
        }

        deinit {
            if let _iiterable { IUnknownPointer.release(_iiterable) }
        }
    }
}

extension WindowsFoundationCollections_IMapProjection {
    public final class String_Object: WinRTProjectionBase<String_Object>, WinRTProjection, WindowsFoundationCollections_IMapProtocol {
        public typealias SwiftObject = WindowsFoundationCollections_IMap<Swift.String, WindowsRuntime.IInspectable?>
        public typealias COMInterface = CWindowsFoundation.__FIMap_2_HSTRING_IInspectable
        public typealias COMVirtualTable = CWindowsFoundation.__FIMap_2_HSTRING_IInspectableVtbl

        public static let iid = IID(0x1B0D3570, 0x0877, 0x5EC2, 0x8A2C, 0x3B9539506ACA)
        public static let runtimeClassName = "Windows.Foundation.Collections.IMap`2<String, Object>"

        public typealias T = WindowsFoundationCollections_IKeyValuePair<Swift.String, WindowsRuntime.IInspectable?>?

        // Windows.Foundation.Collections.IMap`2<String, Object>
        public var size: Swift.UInt32 {
            get throws {
                var _result: UINT32 = 0
                try HResult.throwIfFailed(comPointer.pointee.lpVtbl.pointee.get_Size(comPointer, &_result))
                return _result
            }
        }

        public func lookup(_ key: Swift.String) throws -> WindowsRuntime.IInspectable? {
            var key = try WindowsRuntime.HStringProjection.toABI(key)
            defer { WindowsRuntime.HStringProjection.release(&key) }
            var _result: IInspectableProjection.COMPointer? = nil
            try HResult.throwIfFailed(comPointer.pointee.lpVtbl.pointee.Lookup(comPointer, key, &_result))
            return WindowsRuntime.IInspectableProjection.toSwift(consuming: &_result)
        }

        public func hasKey(_ key: Swift.String) throws -> Swift.Bool {
            var key = try WindowsRuntime.HStringProjection.toABI(key)
            defer { WindowsRuntime.HStringProjection.release(&key) }
            var _result: boolean = 0
            try HResult.throwIfFailed(comPointer.pointee.lpVtbl.pointee.HasKey(comPointer, key, &_result))
            return COM.BooleanProjection.toSwift(_result)
        }

        public func getView() throws -> WindowsFoundationCollections_IMapView<Swift.String, WindowsRuntime.IInspectable?>? {
            var _result: UnsafeMutablePointer<__FIMapView_2_HSTRING_IInspectable>? = nil
            try HResult.throwIfFailed(comPointer.pointee.lpVtbl.pointee.GetView(comPointer, &_result))
            return WindowsFoundationCollections_IMapViewProjection.String_Object.toSwift(consuming: &_result)
        }

        public func insert(_ key: Swift.String, _ value: WindowsRuntime.IInspectable?) throws -> Swift.Bool {
            var key = try WindowsRuntime.HStringProjection.toABI(key)
            defer { WindowsRuntime.HStringProjection.release(&key) }
            var value = try WindowsRuntime.IInspectableProjection.toABI(value)
            defer { WindowsRuntime.IInspectableProjection.release(&value) }
            var _result: boolean = 0
            try HResult.throwIfFailed(comPointer.pointee.lpVtbl.pointee.Insert(comPointer, key, value, &_result))
            return COM.BooleanProjection.toSwift(_result)
        }

        public func remove(_ key: Swift.String) throws {
            var key = try WindowsRuntime.HStringProjection.toABI(key)
            defer { WindowsRuntime.HStringProjection.release(&key) }
            try HResult.throwIfFailed(comPointer.pointee.lpVtbl.pointee.Remove(comPointer, key))
        }

        public func clear() throws {
            try HResult.throwIfFailed(comPointer.pointee.lpVtbl.pointee.Clear(comPointer))
        }

        // Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Object>>
        private var _iiterable: UnsafeMutablePointer<__FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable>! = nil

        private func _getIIterable() throws -> UnsafeMutablePointer<__FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable> {
            let iid = IID(0xFE2F3D47, 0x5D47, 0x5499, 0x8374, 0x430C7CDA0204)
            _iiterable = try _queryInterfacePointer(iid).cast(to: __FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable.self)
            return _iiterable
        }

        public func first() throws -> WindowsFoundationCollections_IIterator<WindowsFoundationCollections_IKeyValuePair<Swift.String, WindowsRuntime.IInspectable?>?>? {
            let _this = try _getIIterable()
            var _result: UnsafeMutablePointer<__FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable>? = nil
            try HResult.throwIfFailed(_this.pointee.lpVtbl.pointee.First(_this, &_result))
            return WindowsFoundationCollections_IIteratorProjection.IKeyValuePair_String_Object.toSwift(consuming: &_result)
        }

        deinit {
            if let _iiterable { IUnknownPointer.release(_iiterable) }
        }
    }
}

extension WindowsFoundationCollections_IMapProjection {
    public final class String_String: WinRTProjectionBase<String_String>, WinRTProjection, WindowsFoundationCollections_IMapProtocol {
        public typealias SwiftObject = WindowsFoundationCollections_IMap<Swift.String, Swift.String>
        public typealias COMInterface = CWindowsFoundation.__FIMap_2_HSTRING_HSTRING
        public typealias COMVirtualTable = CWindowsFoundation.__FIMap_2_HSTRING_HSTRINGVtbl

        public static let iid = IID(0xF6D1F700, 0x49C2, 0x52AE, 0x8154, 0x826F9908773C)
        public static let runtimeClassName = "Windows.Foundation.Collections.IMap`2<String, String>"

        public typealias T = WindowsFoundationCollections_IKeyValuePair<Swift.String, Swift.String>?

        // Windows.Foundation.Collections.IMap`2<String, String>
        public var size: Swift.UInt32 {
            get throws {
                var _result: UINT32 = 0
                try HResult.throwIfFailed(comPointer.pointee.lpVtbl.pointee.get_Size(comPointer, &_result))
                return _result
            }
        }

        public func lookup(_ key: Swift.String) throws -> Swift.String {
            var key = try WindowsRuntime.HStringProjection.toABI(key)
            defer { WindowsRuntime.HStringProjection.release(&key) }
            var _result: CWindowsFoundation.HSTRING? = nil
            try HResult.throwIfFailed(comPointer.pointee.lpVtbl.pointee.Lookup(comPointer, key, &_result))
            return WindowsRuntime.HStringProjection.toSwift(consuming: &_result)
        }

        public func hasKey(_ key: Swift.String) throws -> Swift.Bool {
            var key = try WindowsRuntime.HStringProjection.toABI(key)
            defer { WindowsRuntime.HStringProjection.release(&key) }
            var _result: boolean = 0
            try HResult.throwIfFailed(comPointer.pointee.lpVtbl.pointee.HasKey(comPointer, key, &_result))
            return COM.BooleanProjection.toSwift(_result)
        }

        public func getView() throws -> WindowsFoundationCollections_IMapView<Swift.String, Swift.String>? {
            var _result: UnsafeMutablePointer<__FIMapView_2_HSTRING_HSTRING>? = nil
            try HResult.throwIfFailed(comPointer.pointee.lpVtbl.pointee.GetView(comPointer, &_result))
            return WindowsFoundationCollections_IMapViewProjection.String_String.toSwift(consuming: &_result)
        }

        public func insert(_ key: Swift.String, _ value: Swift.String) throws -> Swift.Bool {
            var key = try WindowsRuntime.HStringProjection.toABI(key)
            defer { WindowsRuntime.HStringProjection.release(&key) }
            var value = try WindowsRuntime.HStringProjection.toABI(value)
            defer { WindowsRuntime.HStringProjection.release(&value) }
            var _result: boolean = 0
            try HResult.throwIfFailed(comPointer.pointee.lpVtbl.pointee.Insert(comPointer, key, value, &_result))
            return COM.BooleanProjection.toSwift(_result)
        }

        public func remove(_ key: Swift.String) throws {
            var key = try WindowsRuntime.HStringProjection.toABI(key)
            defer { WindowsRuntime.HStringProjection.release(&key) }
            try HResult.throwIfFailed(comPointer.pointee.lpVtbl.pointee.Remove(comPointer, key))
        }

        public func clear() throws {
            try HResult.throwIfFailed(comPointer.pointee.lpVtbl.pointee.Clear(comPointer))
        }

        // Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, String>>
        private var _iiterable: UnsafeMutablePointer<__FIIterable_1___FIKeyValuePair_2_HSTRING_HSTRING>! = nil

        private func _getIIterable() throws -> UnsafeMutablePointer<__FIIterable_1___FIKeyValuePair_2_HSTRING_HSTRING> {
            let iid = IID(0xE9BDAAF0, 0xCBF6, 0x5C72, 0xBE90, 0x29CBF3A1319B)
            _iiterable = try _queryInterfacePointer(iid).cast(to: __FIIterable_1___FIKeyValuePair_2_HSTRING_HSTRING.self)
            return _iiterable
        }

        public func first() throws -> WindowsFoundationCollections_IIterator<WindowsFoundationCollections_IKeyValuePair<Swift.String, Swift.String>?>? {
            let _this = try _getIIterable()
            var _result: UnsafeMutablePointer<__FIIterator_1___FIKeyValuePair_2_HSTRING_HSTRING>? = nil
            try HResult.throwIfFailed(_this.pointee.lpVtbl.pointee.First(_this, &_result))
            return WindowsFoundationCollections_IIteratorProjection.IKeyValuePair_String_String.toSwift(consuming: &_result)
        }

        deinit {
            if let _iiterable { IUnknownPointer.release(_iiterable) }
        }
    }
}

extension WindowsFoundationCollections_IObservableMapProjection {
    public final class String_Object: WinRTProjectionBase<String_Object>, WinRTProjection, WindowsFoundationCollections_IObservableMapProtocol {
        public typealias SwiftObject = WindowsFoundationCollections_IObservableMap<Swift.String, WindowsRuntime.IInspectable?>
        public typealias COMInterface = CWindowsFoundation.__FIObservableMap_2_HSTRING_IInspectable
        public typealias COMVirtualTable = CWindowsFoundation.__FIObservableMap_2_HSTRING_IInspectableVtbl

        public static let iid = IID(0x236AAC9D, 0xFB12, 0x5C4D, 0xA41C, 0x9E445FB4D7EC)
        public static let runtimeClassName = "Windows.Foundation.Collections.IObservableMap`2<String, Object>"

        public typealias K = Swift.String
        public typealias V = WindowsRuntime.IInspectable?

        // Windows.Foundation.Collections.IObservableMap`2<String, Object>
        // Windows.Foundation.Collections.IMap`2<String, Object>
        private var _imap: UnsafeMutablePointer<__FIMap_2_HSTRING_IInspectable>! = nil

        private func _getIMap() throws -> UnsafeMutablePointer<__FIMap_2_HSTRING_IInspectable> {
            let iid = IID(0x1B0D3570, 0x0877, 0x5EC2, 0x8A2C, 0x3B9539506ACA)
            _imap = try _queryInterfacePointer(iid).cast(to: __FIMap_2_HSTRING_IInspectable.self)
            return _imap
        }

        public var size: Swift.UInt32 {
            get throws {
                let _this = try _getIMap()
                var _result: UINT32 = 0
                try HResult.throwIfFailed(_this.pointee.lpVtbl.pointee.get_Size(_this, &_result))
                return _result
            }
        }

        public func lookup(_ key: Swift.String) throws -> WindowsRuntime.IInspectable? {
            let _this = try _getIMap()
            var key = try WindowsRuntime.HStringProjection.toABI(key)
            defer { WindowsRuntime.HStringProjection.release(&key) }
            var _result: IInspectableProjection.COMPointer? = nil
            try HResult.throwIfFailed(_this.pointee.lpVtbl.pointee.Lookup(_this, key, &_result))
            return WindowsRuntime.IInspectableProjection.toSwift(consuming: &_result)
        }

        public func hasKey(_ key: Swift.String) throws -> Swift.Bool {
            let _this = try _getIMap()
            var key = try WindowsRuntime.HStringProjection.toABI(key)
            defer { WindowsRuntime.HStringProjection.release(&key) }
            var _result: boolean = 0
            try HResult.throwIfFailed(_this.pointee.lpVtbl.pointee.HasKey(_this, key, &_result))
            return COM.BooleanProjection.toSwift(_result)
        }

        public func getView() throws -> WindowsFoundationCollections_IMapView<Swift.String, WindowsRuntime.IInspectable?>? {
            let _this = try _getIMap()
            var _result: UnsafeMutablePointer<__FIMapView_2_HSTRING_IInspectable>? = nil
            try HResult.throwIfFailed(_this.pointee.lpVtbl.pointee.GetView(_this, &_result))
            return WindowsFoundationCollections_IMapViewProjection.String_Object.toSwift(consuming: &_result)
        }

        public func insert(_ key: Swift.String, _ value: WindowsRuntime.IInspectable?) throws -> Swift.Bool {
            let _this = try _getIMap()
            var key = try WindowsRuntime.HStringProjection.toABI(key)
            defer { WindowsRuntime.HStringProjection.release(&key) }
            var value = try WindowsRuntime.IInspectableProjection.toABI(value)
            defer { WindowsRuntime.IInspectableProjection.release(&value) }
            var _result: boolean = 0
            try HResult.throwIfFailed(_this.pointee.lpVtbl.pointee.Insert(_this, key, value, &_result))
            return COM.BooleanProjection.toSwift(_result)
        }

        public func remove(_ key: Swift.String) throws {
            let _this = try _getIMap()
            var key = try WindowsRuntime.HStringProjection.toABI(key)
            defer { WindowsRuntime.HStringProjection.release(&key) }
            try HResult.throwIfFailed(_this.pointee.lpVtbl.pointee.Remove(_this, key))
        }

        public func clear() throws {
            let _this = try _getIMap()
            try HResult.throwIfFailed(_this.pointee.lpVtbl.pointee.Clear(_this))
        }

        // Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Object>>
        private var _iiterable: UnsafeMutablePointer<__FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable>! = nil

        private func _getIIterable() throws -> UnsafeMutablePointer<__FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable> {
            let iid = IID(0xFE2F3D47, 0x5D47, 0x5499, 0x8374, 0x430C7CDA0204)
            _iiterable = try _queryInterfacePointer(iid).cast(to: __FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable.self)
            return _iiterable
        }

        public func first() throws -> WindowsFoundationCollections_IIterator<WindowsFoundationCollections_IKeyValuePair<Swift.String, WindowsRuntime.IInspectable?>?>? {
            let _this = try _getIIterable()
            var _result: UnsafeMutablePointer<__FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable>? = nil
            try HResult.throwIfFailed(_this.pointee.lpVtbl.pointee.First(_this, &_result))
            return WindowsFoundationCollections_IIteratorProjection.IKeyValuePair_String_Object.toSwift(consuming: &_result)
        }

        deinit {
            if let _imap { IUnknownPointer.release(_imap) }
            if let _iiterable { IUnknownPointer.release(_iiterable) }
        }
    }
}

extension WindowsFoundationCollections_IObservableMapProjection {
    public final class String_String: WinRTProjectionBase<String_String>, WinRTProjection, WindowsFoundationCollections_IObservableMapProtocol {
        public typealias SwiftObject = WindowsFoundationCollections_IObservableMap<Swift.String, Swift.String>
        public typealias COMInterface = CWindowsFoundation.__FIObservableMap_2_HSTRING_HSTRING
        public typealias COMVirtualTable = CWindowsFoundation.__FIObservableMap_2_HSTRING_HSTRINGVtbl

        public static let iid = IID(0x1E036276, 0x2F60, 0x55F6, 0xB7F3, 0xF86079E6900B)
        public static let runtimeClassName = "Windows.Foundation.Collections.IObservableMap`2<String, String>"

        public typealias K = Swift.String
        public typealias V = Swift.String

        // Windows.Foundation.Collections.IObservableMap`2<String, String>
        // Windows.Foundation.Collections.IMap`2<String, String>
        private var _imap: UnsafeMutablePointer<__FIMap_2_HSTRING_HSTRING>! = nil

        private func _getIMap() throws -> UnsafeMutablePointer<__FIMap_2_HSTRING_HSTRING> {
            let iid = IID(0xF6D1F700, 0x49C2, 0x52AE, 0x8154, 0x826F9908773C)
            _imap = try _queryInterfacePointer(iid).cast(to: __FIMap_2_HSTRING_HSTRING.self)
            return _imap
        }

        public var size: Swift.UInt32 {
            get throws {
                let _this = try _getIMap()
                var _result: UINT32 = 0
                try HResult.throwIfFailed(_this.pointee.lpVtbl.pointee.get_Size(_this, &_result))
                return _result
            }
        }

        public func lookup(_ key: Swift.String) throws -> Swift.String {
            let _this = try _getIMap()
            var key = try WindowsRuntime.HStringProjection.toABI(key)
            defer { WindowsRuntime.HStringProjection.release(&key) }
            var _result: CWindowsFoundation.HSTRING? = nil
            try HResult.throwIfFailed(_this.pointee.lpVtbl.pointee.Lookup(_this, key, &_result))
            return WindowsRuntime.HStringProjection.toSwift(consuming: &_result)
        }

        public func hasKey(_ key: Swift.String) throws -> Swift.Bool {
            let _this = try _getIMap()
            var key = try WindowsRuntime.HStringProjection.toABI(key)
            defer { WindowsRuntime.HStringProjection.release(&key) }
            var _result: boolean = 0
            try HResult.throwIfFailed(_this.pointee.lpVtbl.pointee.HasKey(_this, key, &_result))
            return COM.BooleanProjection.toSwift(_result)
        }

        public func getView() throws -> WindowsFoundationCollections_IMapView<Swift.String, Swift.String>? {
            let _this = try _getIMap()
            var _result: UnsafeMutablePointer<__FIMapView_2_HSTRING_HSTRING>? = nil
            try HResult.throwIfFailed(_this.pointee.lpVtbl.pointee.GetView(_this, &_result))
            return WindowsFoundationCollections_IMapViewProjection.String_String.toSwift(consuming: &_result)
        }

        public func insert(_ key: Swift.String, _ value: Swift.String) throws -> Swift.Bool {
            let _this = try _getIMap()
            var key = try WindowsRuntime.HStringProjection.toABI(key)
            defer { WindowsRuntime.HStringProjection.release(&key) }
            var value = try WindowsRuntime.HStringProjection.toABI(value)
            defer { WindowsRuntime.HStringProjection.release(&value) }
            var _result: boolean = 0
            try HResult.throwIfFailed(_this.pointee.lpVtbl.pointee.Insert(_this, key, value, &_result))
            return COM.BooleanProjection.toSwift(_result)
        }

        public func remove(_ key: Swift.String) throws {
            let _this = try _getIMap()
            var key = try WindowsRuntime.HStringProjection.toABI(key)
            defer { WindowsRuntime.HStringProjection.release(&key) }
            try HResult.throwIfFailed(_this.pointee.lpVtbl.pointee.Remove(_this, key))
        }

        public func clear() throws {
            let _this = try _getIMap()
            try HResult.throwIfFailed(_this.pointee.lpVtbl.pointee.Clear(_this))
        }

        // Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, String>>
        private var _iiterable: UnsafeMutablePointer<__FIIterable_1___FIKeyValuePair_2_HSTRING_HSTRING>! = nil

        private func _getIIterable() throws -> UnsafeMutablePointer<__FIIterable_1___FIKeyValuePair_2_HSTRING_HSTRING> {
            let iid = IID(0xE9BDAAF0, 0xCBF6, 0x5C72, 0xBE90, 0x29CBF3A1319B)
            _iiterable = try _queryInterfacePointer(iid).cast(to: __FIIterable_1___FIKeyValuePair_2_HSTRING_HSTRING.self)
            return _iiterable
        }

        public func first() throws -> WindowsFoundationCollections_IIterator<WindowsFoundationCollections_IKeyValuePair<Swift.String, Swift.String>?>? {
            let _this = try _getIIterable()
            var _result: UnsafeMutablePointer<__FIIterator_1___FIKeyValuePair_2_HSTRING_HSTRING>? = nil
            try HResult.throwIfFailed(_this.pointee.lpVtbl.pointee.First(_this, &_result))
            return WindowsFoundationCollections_IIteratorProjection.IKeyValuePair_String_String.toSwift(consuming: &_result)
        }

        deinit {
            if let _imap { IUnknownPointer.release(_imap) }
            if let _iiterable { IUnknownPointer.release(_iiterable) }
        }
    }
}

extension WindowsFoundationCollections_MapChangedEventHandlerProjection {
    public final class String_Object: WinRTDelegateProjectionBase<String_Object>, COMTwoWayProjection {
        public typealias SwiftObject = WindowsFoundationCollections_MapChangedEventHandler<Swift.String, WindowsRuntime.IInspectable?>
        public typealias COMInterface = CWindowsFoundation.__FMapChangedEventHandler_2_HSTRING_IInspectable
        public typealias COMVirtualTable = CWindowsFoundation.__FMapChangedEventHandler_2_HSTRING_IInspectableVtbl

        public static let iid = IID(0x24F981E5, 0xDDCA, 0x538D, 0xAADA, 0xA59906084CF1)

        public override var swiftObject: SwiftObject {
            invoke
        }

        public func invoke(_ sender: WindowsFoundationCollections_IObservableMap<Swift.String, WindowsRuntime.IInspectable?>?, _ event: WindowsFoundationCollections_IMapChangedEventArgs<Swift.String>?) throws {
            var sender = try WindowsFoundationCollections_IObservableMapProjection.String_Object.toABI(sender)
            defer { WindowsFoundationCollections_IObservableMapProjection.String_Object.release(&sender) }
            var event = try WindowsFoundationCollections_IMapChangedEventArgsProjection.String.toABI(event)
            defer { WindowsFoundationCollections_IMapChangedEventArgsProjection.String.release(&event) }
            try HResult.throwIfFailed(comPointer.pointee.lpVtbl.pointee.Invoke(comPointer, sender, event))
        }

        public static var virtualTablePointer: COMVirtualTablePointer {
            fatalError("Not implemented: \(#function)")
        }
    }
}

extension WindowsFoundationCollections_MapChangedEventHandlerProjection {
    public final class String_String: WinRTDelegateProjectionBase<String_String>, COMTwoWayProjection {
        public typealias SwiftObject = WindowsFoundationCollections_MapChangedEventHandler<Swift.String, Swift.String>
        public typealias COMInterface = CWindowsFoundation.__FMapChangedEventHandler_2_HSTRING_HSTRING
        public typealias COMVirtualTable = CWindowsFoundation.__FMapChangedEventHandler_2_HSTRING_HSTRINGVtbl

        public static let iid = IID(0xE2663F37, 0x2E1B, 0x500C, 0xAD68, 0xC3ED7A8F74C8)

        public override var swiftObject: SwiftObject {
            invoke
        }

        public func invoke(_ sender: WindowsFoundationCollections_IObservableMap<Swift.String, Swift.String>?, _ event: WindowsFoundationCollections_IMapChangedEventArgs<Swift.String>?) throws {
            var sender = try WindowsFoundationCollections_IObservableMapProjection.String_String.toABI(sender)
            defer { WindowsFoundationCollections_IObservableMapProjection.String_String.release(&sender) }
            var event = try WindowsFoundationCollections_IMapChangedEventArgsProjection.String.toABI(event)
            defer { WindowsFoundationCollections_IMapChangedEventArgsProjection.String.release(&event) }
            try HResult.throwIfFailed(comPointer.pointee.lpVtbl.pointee.Invoke(comPointer, sender, event))
        }

        public static var virtualTablePointer: COMVirtualTablePointer {
            fatalError("Not implemented: \(#function)")
        }
    }
}