// Generated by swift-winrt
// swiftlint:disable all

import CWindowsFoundation
import WindowsRuntime
import struct Foundation.UUID

extension WindowsFoundationCollections_CollectionChange: WindowsRuntime.EnumProjection {
    public typealias CEnum = CWindowsFoundation.__x_ABI_CWindows_CFoundation_CCollections_CCollectionChange
}

public enum WindowsFoundationCollections_IIterableProjection<T> {
}

public enum WindowsFoundationCollections_IIteratorProjection<T> {
}

public enum WindowsFoundationCollections_IKeyValuePairProjection<K, V> {
}

public enum WindowsFoundationCollections_IMapChangedEventArgsProjection<K> {
}

public enum WindowsFoundationCollections_IMapViewProjection<K, V> {
}

public enum WindowsFoundationCollections_IMapProjection<K, V> {
}

public enum WindowsFoundationCollections_IObservableMapProjection<K, V> {
}

public enum WindowsFoundationCollections_IObservableVectorProjection<T> {
}

public final class WindowsFoundationCollections_IPropertySetProjection: WinRTProjectionBase<WindowsFoundationCollections_IPropertySetProjection>, WinRTProjection, WindowsFoundationCollections_IPropertySetProtocol {
    public typealias SwiftObject = WindowsFoundationCollections_IPropertySet
    public typealias COMInterface = CWindowsFoundation.__x_ABI_CWindows_CFoundation_CCollections_CIPropertySet
    public typealias COMVirtualTable = CWindowsFoundation.__x_ABI_CWindows_CFoundation_CCollections_CIPropertySetVtbl

    public static let iid = IID(0x8A43ED9F, 0xF4E6, 0x4421, 0xACF9, 0x1DAB2986820C)
    public static let runtimeClassName = "Windows.Foundation.Collections.IPropertySet"

    public typealias K = String
    public typealias V = WindowsRuntime.IInspectable?
    public typealias T = WindowsFoundationCollections_IKeyValuePair<String, WindowsRuntime.IInspectable?>?

    // Windows.Foundation.Collections.IPropertySet
    // Windows.Foundation.Collections.IObservableMap`2<String, Object>

    private var _iobservableMap: UnsafeMutablePointer<__FIObservableMap_2_HSTRING_IInspectable>! = nil

    private func _initIObservableMap() throws {
        guard _iobservableMap == nil else { return }
        _iobservableMap = try _queryInterfacePointer(IID(0x65DF2BF5, 0xBF39, 0x41B5, 0xAEBC, 0x5A9D865E472B)).cast(to: __FIObservableMap_2_HSTRING_IInspectable.self)
    }

    // Windows.Foundation.Collections.IMap`2<String, Object>

    private var _imap: UnsafeMutablePointer<__FIMap_2_HSTRING_IInspectable>! = nil

    private func _initIMap() throws {
        guard _imap == nil else { return }
        _imap = try _queryInterfacePointer(IID(0x3C2925FE, 0x8519, 0x45C1, 0xAA79, 0x197B6718C1C1)).cast(to: __FIMap_2_HSTRING_IInspectable.self)
    }

    public var size: UInt32 {
        get throws {
            try _initIMap()
            var _result: UINT32 = 0
            try HResult.throwIfFailed(_imap.pointee.lpVtbl.pointee.get_Size(_imap, &_result))
            return _result
        }
    }

    public func lookup(_ key: String) throws -> WindowsRuntime.IInspectable? {
        try _initIMap()
        let key = try HStringProjection.toABI(key)
        defer { HStringProjection.release(key) }
        var _result: IInspectableProjection.COMPointer? = nil
        try HResult.throwIfFailed(_imap.pointee.lpVtbl.pointee.Lookup(_imap, key, &_result))
        return IInspectableProjection.toSwift(consuming: _result)
    }

    public func hasKey(_ key: String) throws -> Bool {
        try _initIMap()
        let key = try HStringProjection.toABI(key)
        defer { HStringProjection.release(key) }
        var _result: boolean = 0
        try HResult.throwIfFailed(_imap.pointee.lpVtbl.pointee.HasKey(_imap, key, &_result))
        return COM.BooleanProjection.toSwift(consuming: _result)
    }

    public func getView() throws -> WindowsFoundationCollections_IMapView<String, WindowsRuntime.IInspectable?>? {
        try _initIMap()
        var _result: UnsafeMutablePointer<__FIMapView_2_HSTRING_IInspectable>? = nil
        try HResult.throwIfFailed(_imap.pointee.lpVtbl.pointee.GetView(_imap, &_result))
        return WindowsFoundationCollections_IMapViewProjection<String, WindowsRuntime.IInspectable?>.Projection.toSwift(consuming: _result)
    }

    public func insert(_ key: String, _ value: WindowsRuntime.IInspectable?) throws -> Bool {
        try _initIMap()
        let key = try HStringProjection.toABI(key)
        defer { HStringProjection.release(key) }
        let value = try IInspectableProjection.toABI(value)
        defer { IInspectableProjection.release(value) }
        var _result: boolean = 0
        try HResult.throwIfFailed(_imap.pointee.lpVtbl.pointee.Insert(_imap, key, value, &_result))
        return COM.BooleanProjection.toSwift(consuming: _result)
    }

    public func remove(_ key: String) throws {
        try _initIMap()
        let key = try HStringProjection.toABI(key)
        defer { HStringProjection.release(key) }
        try HResult.throwIfFailed(_imap.pointee.lpVtbl.pointee.Remove(_imap, key))
    }

    public func clear() throws {
        try _initIMap()
        try HResult.throwIfFailed(_imap.pointee.lpVtbl.pointee.Clear(_imap))
    }

    // Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Object>>

    private var _iiterable: UnsafeMutablePointer<__FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable>! = nil

    private func _initIIterable() throws {
        guard _iiterable == nil else { return }
        _iiterable = try _queryInterfacePointer(IID(0xFAA585EA, 0x6214, 0x4217, 0xAFDA, 0x7F46DE5869B3)).cast(to: __FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable.self)
    }

    public func first() throws -> WindowsFoundationCollections_IIterator<WindowsFoundationCollections_IKeyValuePair<String, WindowsRuntime.IInspectable?>?>? {
        try _initIIterable()
        var _result: UnsafeMutablePointer<__FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable>? = nil
        try HResult.throwIfFailed(_iiterable.pointee.lpVtbl.pointee.First(_iiterable, &_result))
        return WindowsFoundationCollections_IIteratorProjection<WindowsFoundationCollections_IKeyValuePair<String, WindowsRuntime.IInspectable?>?>.Projection.toSwift(consuming: _result)
    }

    deinit {
        if let _iobservableMap { IUnknownPointer.release(_iobservableMap) }
        if let _imap { IUnknownPointer.release(_imap) }
        if let _iiterable { IUnknownPointer.release(_iiterable) }
    }
}

public final class WindowsFoundationCollections_IVectorChangedEventArgsProjection: WinRTProjectionBase<WindowsFoundationCollections_IVectorChangedEventArgsProjection>, WinRTProjection, WindowsFoundationCollections_IVectorChangedEventArgsProtocol {
    public typealias SwiftObject = WindowsFoundationCollections_IVectorChangedEventArgs
    public typealias COMInterface = CWindowsFoundation.__x_ABI_CWindows_CFoundation_CCollections_CIVectorChangedEventArgs
    public typealias COMVirtualTable = CWindowsFoundation.__x_ABI_CWindows_CFoundation_CCollections_CIVectorChangedEventArgsVtbl

    public static let iid = IID(0x575933DF, 0x34FE, 0x4480, 0xAF15, 0x07691F3D5D9B)
    public static let runtimeClassName = "Windows.Foundation.Collections.IVectorChangedEventArgs"

    // Windows.Foundation.Collections.IVectorChangedEventArgs

    public var collectionChange: WindowsFoundationCollections_CollectionChange {
        get throws {
            var _result: __x_ABI_CWindows_CFoundation_CCollections_CCollectionChange = WindowsFoundationCollections_CollectionChange.abiDefaultValue
            try HResult.throwIfFailed(comPointer.pointee.lpVtbl.pointee.get_CollectionChange(comPointer, &_result))
            return WindowsFoundationCollections_CollectionChange.toSwift(consuming: _result)
        }
    }

    public var index: UInt32 {
        get throws {
            var _result: UINT32 = 0
            try HResult.throwIfFailed(comPointer.pointee.lpVtbl.pointee.get_Index(comPointer, &_result))
            return _result
        }
    }
}

public enum WindowsFoundationCollections_IVectorViewProjection<T> {
}

public enum WindowsFoundationCollections_IVectorProjection<T> {
}

public enum WindowsFoundationCollections_MapChangedEventHandlerProjection<K, V> {
}

public final class WindowsFoundationCollections_PropertySet: WinRTProjectionBase<WindowsFoundationCollections_PropertySet>, WinRTProjection, WindowsFoundationCollections_IPropertySetProtocol, WindowsFoundationCollections_IObservableMapProtocol, WindowsFoundationCollections_IMapProtocol, WindowsFoundationCollections_IIterableProtocol {
    public typealias SwiftObject = WindowsFoundationCollections_PropertySet
    public typealias COMInterface = CWindowsFoundation.__x_ABI_CWindows_CFoundation_CCollections_CIPropertySet
    public typealias COMVirtualTable = CWindowsFoundation.__x_ABI_CWindows_CFoundation_CCollections_CIPropertySetVtbl

    public static let iid = IID(0x8A43ED9F, 0xF4E6, 0x4421, 0xACF9, 0x1DAB2986820C)
    public static let runtimeClassName = "Windows.Foundation.Collections.PropertySet"

    public typealias K = String
    public typealias V = WindowsRuntime.IInspectable?
    public typealias T = WindowsFoundationCollections_IKeyValuePair<String, WindowsRuntime.IInspectable?>?

    // Windows.Foundation.Collections.IPropertySet
    // Windows.Foundation.Collections.IObservableMap`2<String, Object>

    private var _iobservableMap: UnsafeMutablePointer<__FIObservableMap_2_HSTRING_IInspectable>! = nil

    private func _initIObservableMap() throws {
        guard _iobservableMap == nil else { return }
        _iobservableMap = try _queryInterfacePointer(IID(0x65DF2BF5, 0xBF39, 0x41B5, 0xAEBC, 0x5A9D865E472B)).cast(to: __FIObservableMap_2_HSTRING_IInspectable.self)
    }

    // Windows.Foundation.Collections.IMap`2<String, Object>

    private var _imap: UnsafeMutablePointer<__FIMap_2_HSTRING_IInspectable>! = nil

    private func _initIMap() throws {
        guard _imap == nil else { return }
        _imap = try _queryInterfacePointer(IID(0x3C2925FE, 0x8519, 0x45C1, 0xAA79, 0x197B6718C1C1)).cast(to: __FIMap_2_HSTRING_IInspectable.self)
    }

    public var size: UInt32 {
        get throws {
            try _initIMap()
            var _result: UINT32 = 0
            try HResult.throwIfFailed(_imap.pointee.lpVtbl.pointee.get_Size(_imap, &_result))
            return _result
        }
    }

    public func lookup(_ key: String) throws -> WindowsRuntime.IInspectable? {
        try _initIMap()
        let key = try HStringProjection.toABI(key)
        defer { HStringProjection.release(key) }
        var _result: IInspectableProjection.COMPointer? = nil
        try HResult.throwIfFailed(_imap.pointee.lpVtbl.pointee.Lookup(_imap, key, &_result))
        return IInspectableProjection.toSwift(consuming: _result)
    }

    public func hasKey(_ key: String) throws -> Bool {
        try _initIMap()
        let key = try HStringProjection.toABI(key)
        defer { HStringProjection.release(key) }
        var _result: boolean = 0
        try HResult.throwIfFailed(_imap.pointee.lpVtbl.pointee.HasKey(_imap, key, &_result))
        return COM.BooleanProjection.toSwift(consuming: _result)
    }

    public func getView() throws -> WindowsFoundationCollections_IMapView<String, WindowsRuntime.IInspectable?>? {
        try _initIMap()
        var _result: UnsafeMutablePointer<__FIMapView_2_HSTRING_IInspectable>? = nil
        try HResult.throwIfFailed(_imap.pointee.lpVtbl.pointee.GetView(_imap, &_result))
        return WindowsFoundationCollections_IMapViewProjection<String, WindowsRuntime.IInspectable?>.Projection.toSwift(consuming: _result)
    }

    public func insert(_ key: String, _ value: WindowsRuntime.IInspectable?) throws -> Bool {
        try _initIMap()
        let key = try HStringProjection.toABI(key)
        defer { HStringProjection.release(key) }
        let value = try IInspectableProjection.toABI(value)
        defer { IInspectableProjection.release(value) }
        var _result: boolean = 0
        try HResult.throwIfFailed(_imap.pointee.lpVtbl.pointee.Insert(_imap, key, value, &_result))
        return COM.BooleanProjection.toSwift(consuming: _result)
    }

    public func remove(_ key: String) throws {
        try _initIMap()
        let key = try HStringProjection.toABI(key)
        defer { HStringProjection.release(key) }
        try HResult.throwIfFailed(_imap.pointee.lpVtbl.pointee.Remove(_imap, key))
    }

    public func clear() throws {
        try _initIMap()
        try HResult.throwIfFailed(_imap.pointee.lpVtbl.pointee.Clear(_imap))
    }

    // Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Object>>

    private var _iiterable: UnsafeMutablePointer<__FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable>! = nil

    private func _initIIterable() throws {
        guard _iiterable == nil else { return }
        _iiterable = try _queryInterfacePointer(IID(0xFAA585EA, 0x6214, 0x4217, 0xAFDA, 0x7F46DE5869B3)).cast(to: __FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable.self)
    }

    public func first() throws -> WindowsFoundationCollections_IIterator<WindowsFoundationCollections_IKeyValuePair<String, WindowsRuntime.IInspectable?>?>? {
        try _initIIterable()
        var _result: UnsafeMutablePointer<__FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable>? = nil
        try HResult.throwIfFailed(_iiterable.pointee.lpVtbl.pointee.First(_iiterable, &_result))
        return WindowsFoundationCollections_IIteratorProjection<WindowsFoundationCollections_IKeyValuePair<String, WindowsRuntime.IInspectable?>?>.Projection.toSwift(consuming: _result)
    }

    deinit {
        if let _iobservableMap { IUnknownPointer.release(_iobservableMap) }
        if let _imap { IUnknownPointer.release(_imap) }
        if let _iiterable { IUnknownPointer.release(_iiterable) }
    }
}

public final class WindowsFoundationCollections_StringMap: WinRTProjectionBase<WindowsFoundationCollections_StringMap>, WinRTProjection, WindowsFoundationCollections_IMapProtocol, WindowsFoundationCollections_IIterableProtocol, WindowsFoundationCollections_IObservableMapProtocol {
    public typealias SwiftObject = WindowsFoundationCollections_StringMap
    public typealias COMInterface = CWindowsFoundation.__FIMap_2_HSTRING_HSTRING
    public typealias COMVirtualTable = CWindowsFoundation.__FIMap_2_HSTRING_HSTRINGVtbl

    public static let iid = IID(0x3C2925FE, 0x8519, 0x45C1, 0xAA79, 0x197B6718C1C1)
    public static let runtimeClassName = "Windows.Foundation.Collections.StringMap"

    public typealias K = String
    public typealias V = String
    public typealias T = WindowsFoundationCollections_IKeyValuePair<String, String>?

    // Windows.Foundation.Collections.IMap`2<String, String>

    public var size: UInt32 {
        get throws {
            var _result: UINT32 = 0
            try HResult.throwIfFailed(comPointer.pointee.lpVtbl.pointee.get_Size(comPointer, &_result))
            return _result
        }
    }

    public func lookup(_ key: String) throws -> String {
        let key = try HStringProjection.toABI(key)
        defer { HStringProjection.release(key) }
        var _result: HSTRING? = nil
        try HResult.throwIfFailed(comPointer.pointee.lpVtbl.pointee.Lookup(comPointer, key, &_result))
        return HStringProjection.toSwift(consuming: _result)
    }

    public func hasKey(_ key: String) throws -> Bool {
        let key = try HStringProjection.toABI(key)
        defer { HStringProjection.release(key) }
        var _result: boolean = 0
        try HResult.throwIfFailed(comPointer.pointee.lpVtbl.pointee.HasKey(comPointer, key, &_result))
        return COM.BooleanProjection.toSwift(consuming: _result)
    }

    public func getView() throws -> WindowsFoundationCollections_IMapView<String, String>? {
        var _result: UnsafeMutablePointer<__FIMapView_2_HSTRING_HSTRING>? = nil
        try HResult.throwIfFailed(comPointer.pointee.lpVtbl.pointee.GetView(comPointer, &_result))
        return WindowsFoundationCollections_IMapViewProjection<String, String>.Projection.toSwift(consuming: _result)
    }

    public func insert(_ key: String, _ value: String) throws -> Bool {
        let key = try HStringProjection.toABI(key)
        defer { HStringProjection.release(key) }
        let value = try HStringProjection.toABI(value)
        defer { HStringProjection.release(value) }
        var _result: boolean = 0
        try HResult.throwIfFailed(comPointer.pointee.lpVtbl.pointee.Insert(comPointer, key, value, &_result))
        return COM.BooleanProjection.toSwift(consuming: _result)
    }

    public func remove(_ key: String) throws {
        let key = try HStringProjection.toABI(key)
        defer { HStringProjection.release(key) }
        try HResult.throwIfFailed(comPointer.pointee.lpVtbl.pointee.Remove(comPointer, key))
    }

    public func clear() throws {
        try HResult.throwIfFailed(comPointer.pointee.lpVtbl.pointee.Clear(comPointer))
    }

    // Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, String>>

    private var _iiterable: UnsafeMutablePointer<__FIIterable_1___FIKeyValuePair_2_HSTRING_HSTRING>! = nil

    private func _initIIterable() throws {
        guard _iiterable == nil else { return }
        _iiterable = try _queryInterfacePointer(IID(0xFAA585EA, 0x6214, 0x4217, 0xAFDA, 0x7F46DE5869B3)).cast(to: __FIIterable_1___FIKeyValuePair_2_HSTRING_HSTRING.self)
    }

    public func first() throws -> WindowsFoundationCollections_IIterator<WindowsFoundationCollections_IKeyValuePair<String, String>?>? {
        try _initIIterable()
        var _result: UnsafeMutablePointer<__FIIterator_1___FIKeyValuePair_2_HSTRING_HSTRING>? = nil
        try HResult.throwIfFailed(_iiterable.pointee.lpVtbl.pointee.First(_iiterable, &_result))
        return WindowsFoundationCollections_IIteratorProjection<WindowsFoundationCollections_IKeyValuePair<String, String>?>.Projection.toSwift(consuming: _result)
    }

    // Windows.Foundation.Collections.IObservableMap`2<String, String>

    private var _iobservableMap: UnsafeMutablePointer<__FIObservableMap_2_HSTRING_HSTRING>! = nil

    private func _initIObservableMap() throws {
        guard _iobservableMap == nil else { return }
        _iobservableMap = try _queryInterfacePointer(IID(0x65DF2BF5, 0xBF39, 0x41B5, 0xAEBC, 0x5A9D865E472B)).cast(to: __FIObservableMap_2_HSTRING_HSTRING.self)
    }

    deinit {
        if let _iiterable { IUnknownPointer.release(_iiterable) }
        if let _iobservableMap { IUnknownPointer.release(_iobservableMap) }
    }
}

public final class WindowsFoundationCollections_ValueSet: WinRTProjectionBase<WindowsFoundationCollections_ValueSet>, WinRTProjection, WindowsFoundationCollections_IPropertySetProtocol, WindowsFoundationCollections_IObservableMapProtocol, WindowsFoundationCollections_IMapProtocol, WindowsFoundationCollections_IIterableProtocol {
    public typealias SwiftObject = WindowsFoundationCollections_ValueSet
    public typealias COMInterface = CWindowsFoundation.__x_ABI_CWindows_CFoundation_CCollections_CIPropertySet
    public typealias COMVirtualTable = CWindowsFoundation.__x_ABI_CWindows_CFoundation_CCollections_CIPropertySetVtbl

    public static let iid = IID(0x8A43ED9F, 0xF4E6, 0x4421, 0xACF9, 0x1DAB2986820C)
    public static let runtimeClassName = "Windows.Foundation.Collections.ValueSet"

    public typealias K = String
    public typealias V = WindowsRuntime.IInspectable?
    public typealias T = WindowsFoundationCollections_IKeyValuePair<String, WindowsRuntime.IInspectable?>?

    // Windows.Foundation.Collections.IPropertySet
    // Windows.Foundation.Collections.IObservableMap`2<String, Object>

    private var _iobservableMap: UnsafeMutablePointer<__FIObservableMap_2_HSTRING_IInspectable>! = nil

    private func _initIObservableMap() throws {
        guard _iobservableMap == nil else { return }
        _iobservableMap = try _queryInterfacePointer(IID(0x65DF2BF5, 0xBF39, 0x41B5, 0xAEBC, 0x5A9D865E472B)).cast(to: __FIObservableMap_2_HSTRING_IInspectable.self)
    }

    // Windows.Foundation.Collections.IMap`2<String, Object>

    private var _imap: UnsafeMutablePointer<__FIMap_2_HSTRING_IInspectable>! = nil

    private func _initIMap() throws {
        guard _imap == nil else { return }
        _imap = try _queryInterfacePointer(IID(0x3C2925FE, 0x8519, 0x45C1, 0xAA79, 0x197B6718C1C1)).cast(to: __FIMap_2_HSTRING_IInspectable.self)
    }

    public var size: UInt32 {
        get throws {
            try _initIMap()
            var _result: UINT32 = 0
            try HResult.throwIfFailed(_imap.pointee.lpVtbl.pointee.get_Size(_imap, &_result))
            return _result
        }
    }

    public func lookup(_ key: String) throws -> WindowsRuntime.IInspectable? {
        try _initIMap()
        let key = try HStringProjection.toABI(key)
        defer { HStringProjection.release(key) }
        var _result: IInspectableProjection.COMPointer? = nil
        try HResult.throwIfFailed(_imap.pointee.lpVtbl.pointee.Lookup(_imap, key, &_result))
        return IInspectableProjection.toSwift(consuming: _result)
    }

    public func hasKey(_ key: String) throws -> Bool {
        try _initIMap()
        let key = try HStringProjection.toABI(key)
        defer { HStringProjection.release(key) }
        var _result: boolean = 0
        try HResult.throwIfFailed(_imap.pointee.lpVtbl.pointee.HasKey(_imap, key, &_result))
        return COM.BooleanProjection.toSwift(consuming: _result)
    }

    public func getView() throws -> WindowsFoundationCollections_IMapView<String, WindowsRuntime.IInspectable?>? {
        try _initIMap()
        var _result: UnsafeMutablePointer<__FIMapView_2_HSTRING_IInspectable>? = nil
        try HResult.throwIfFailed(_imap.pointee.lpVtbl.pointee.GetView(_imap, &_result))
        return WindowsFoundationCollections_IMapViewProjection<String, WindowsRuntime.IInspectable?>.Projection.toSwift(consuming: _result)
    }

    public func insert(_ key: String, _ value: WindowsRuntime.IInspectable?) throws -> Bool {
        try _initIMap()
        let key = try HStringProjection.toABI(key)
        defer { HStringProjection.release(key) }
        let value = try IInspectableProjection.toABI(value)
        defer { IInspectableProjection.release(value) }
        var _result: boolean = 0
        try HResult.throwIfFailed(_imap.pointee.lpVtbl.pointee.Insert(_imap, key, value, &_result))
        return COM.BooleanProjection.toSwift(consuming: _result)
    }

    public func remove(_ key: String) throws {
        try _initIMap()
        let key = try HStringProjection.toABI(key)
        defer { HStringProjection.release(key) }
        try HResult.throwIfFailed(_imap.pointee.lpVtbl.pointee.Remove(_imap, key))
    }

    public func clear() throws {
        try _initIMap()
        try HResult.throwIfFailed(_imap.pointee.lpVtbl.pointee.Clear(_imap))
    }

    // Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Object>>

    private var _iiterable: UnsafeMutablePointer<__FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable>! = nil

    private func _initIIterable() throws {
        guard _iiterable == nil else { return }
        _iiterable = try _queryInterfacePointer(IID(0xFAA585EA, 0x6214, 0x4217, 0xAFDA, 0x7F46DE5869B3)).cast(to: __FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable.self)
    }

    public func first() throws -> WindowsFoundationCollections_IIterator<WindowsFoundationCollections_IKeyValuePair<String, WindowsRuntime.IInspectable?>?>? {
        try _initIIterable()
        var _result: UnsafeMutablePointer<__FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable>? = nil
        try HResult.throwIfFailed(_iiterable.pointee.lpVtbl.pointee.First(_iiterable, &_result))
        return WindowsFoundationCollections_IIteratorProjection<WindowsFoundationCollections_IKeyValuePair<String, WindowsRuntime.IInspectable?>?>.Projection.toSwift(consuming: _result)
    }

    deinit {
        if let _iobservableMap { IUnknownPointer.release(_iobservableMap) }
        if let _imap { IUnknownPointer.release(_imap) }
        if let _iiterable { IUnknownPointer.release(_iiterable) }
    }
}

public enum WindowsFoundationCollections_VectorChangedEventHandlerProjection<T> {
}