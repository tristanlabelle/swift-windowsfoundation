// Generated by swift-winrt
// swiftlint:disable all

import CWindowsFoundation
import WindowsRuntime
import struct Foundation.UUID

extension WindowsFoundationCollections_CollectionChange: WindowsRuntime.EnumProjection {
    public typealias CEnum = CWindowsFoundation.__x_ABI_CWindows_CFoundation_CCollections_CCollectionChange
}

public enum WindowsFoundationCollections_IIterableProjection {
}

public enum WindowsFoundationCollections_IIteratorProjection {
}

public enum WindowsFoundationCollections_IKeyValuePairProjection {
}

public enum WindowsFoundationCollections_IMapChangedEventArgsProjection {
}

public enum WindowsFoundationCollections_IMapViewProjection {
}

public enum WindowsFoundationCollections_IMapProjection {
}

public enum WindowsFoundationCollections_IObservableMapProjection {
}

public enum WindowsFoundationCollections_IObservableVectorProjection {
}

public final class WindowsFoundationCollections_IPropertySetProjection: WinRTProjectionBase<WindowsFoundationCollections_IPropertySetProjection>, WinRTProjection, WindowsFoundationCollections_IPropertySetProtocol {
    public typealias SwiftObject = WindowsFoundationCollections_IPropertySet
    public typealias COMInterface = CWindowsFoundation.__x_ABI_CWindows_CFoundation_CCollections_CIPropertySet
    public typealias COMVirtualTable = CWindowsFoundation.__x_ABI_CWindows_CFoundation_CCollections_CIPropertySetVtbl

    public static let iid = IID(0x8A43ED9F, 0xF4E6, 0x4421, 0xACF9, 0x1DAB2986820C)
    public static let runtimeClassName = "Windows.Foundation.Collections.IPropertySet"

    public typealias K = Swift.String
    public typealias V = WindowsRuntime.IInspectable?
    public typealias T = WindowsFoundationCollections_IKeyValuePair<Swift.String, WindowsRuntime.IInspectable?>?

    // Windows.Foundation.Collections.IPropertySet
    // Windows.Foundation.Collections.IObservableMap`2<String, Object>
    private var _iobservableMap: UnsafeMutablePointer<__FIObservableMap_2_HSTRING_IInspectable>! = nil

    private func _getIObservableMap() throws -> UnsafeMutablePointer<__FIObservableMap_2_HSTRING_IInspectable> {
        let iid = IID(0x236AAC9D, 0xFB12, 0x5C4D, 0xA41C, 0x9E445FB4D7EC)
        _iobservableMap = try _queryInterfacePointer(iid).cast(to: __FIObservableMap_2_HSTRING_IInspectable.self)
        return _iobservableMap
    }

    // Windows.Foundation.Collections.IMap`2<String, Object>
    private var _imap: UnsafeMutablePointer<__FIMap_2_HSTRING_IInspectable>! = nil

    private func _getIMap() throws -> UnsafeMutablePointer<__FIMap_2_HSTRING_IInspectable> {
        let iid = IID(0x1B0D3570, 0x0877, 0x5EC2, 0x8A2C, 0x3B9539506ACA)
        _imap = try _queryInterfacePointer(iid).cast(to: __FIMap_2_HSTRING_IInspectable.self)
        return _imap
    }

    public var size: Swift.UInt32 {
        get throws {
            let _this = try _getIMap()
            var _result: UINT32 = 0
            try HResult.throwIfFailed(_this.pointee.lpVtbl.pointee.get_Size(_this, &_result))
            return _result
        }
    }

    public func lookup(_ key: Swift.String) throws -> WindowsRuntime.IInspectable? {
        let _this = try _getIMap()
        var key = try WindowsRuntime.HStringProjection.toABI(key)
        defer { WindowsRuntime.HStringProjection.release(&key) }
        var _result: IInspectableProjection.COMPointer? = nil
        try HResult.throwIfFailed(_this.pointee.lpVtbl.pointee.Lookup(_this, key, &_result))
        return WindowsRuntime.IInspectableProjection.toSwift(consuming: &_result)
    }

    public func hasKey(_ key: Swift.String) throws -> Swift.Bool {
        let _this = try _getIMap()
        var key = try WindowsRuntime.HStringProjection.toABI(key)
        defer { WindowsRuntime.HStringProjection.release(&key) }
        var _result: boolean = 0
        try HResult.throwIfFailed(_this.pointee.lpVtbl.pointee.HasKey(_this, key, &_result))
        return COM.BooleanProjection.toSwift(_result)
    }

    public func getView() throws -> WindowsFoundationCollections_IMapView<Swift.String, WindowsRuntime.IInspectable?>? {
        let _this = try _getIMap()
        var _result: UnsafeMutablePointer<__FIMapView_2_HSTRING_IInspectable>? = nil
        try HResult.throwIfFailed(_this.pointee.lpVtbl.pointee.GetView(_this, &_result))
        return WindowsFoundationCollections_IMapViewProjection.String_Object.toSwift(consuming: &_result)
    }

    public func insert(_ key: Swift.String, _ value: WindowsRuntime.IInspectable?) throws -> Swift.Bool {
        let _this = try _getIMap()
        var key = try WindowsRuntime.HStringProjection.toABI(key)
        defer { WindowsRuntime.HStringProjection.release(&key) }
        var value = try WindowsRuntime.IInspectableProjection.toABI(value)
        defer { WindowsRuntime.IInspectableProjection.release(&value) }
        var _result: boolean = 0
        try HResult.throwIfFailed(_this.pointee.lpVtbl.pointee.Insert(_this, key, value, &_result))
        return COM.BooleanProjection.toSwift(_result)
    }

    public func remove(_ key: Swift.String) throws {
        let _this = try _getIMap()
        var key = try WindowsRuntime.HStringProjection.toABI(key)
        defer { WindowsRuntime.HStringProjection.release(&key) }
        try HResult.throwIfFailed(_this.pointee.lpVtbl.pointee.Remove(_this, key))
    }

    public func clear() throws {
        let _this = try _getIMap()
        try HResult.throwIfFailed(_this.pointee.lpVtbl.pointee.Clear(_this))
    }

    // Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Object>>
    private var _iiterable: UnsafeMutablePointer<__FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable>! = nil

    private func _getIIterable() throws -> UnsafeMutablePointer<__FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable> {
        let iid = IID(0xFE2F3D47, 0x5D47, 0x5499, 0x8374, 0x430C7CDA0204)
        _iiterable = try _queryInterfacePointer(iid).cast(to: __FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable.self)
        return _iiterable
    }

    public func first() throws -> WindowsFoundationCollections_IIterator<WindowsFoundationCollections_IKeyValuePair<Swift.String, WindowsRuntime.IInspectable?>?>? {
        let _this = try _getIIterable()
        var _result: UnsafeMutablePointer<__FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable>? = nil
        try HResult.throwIfFailed(_this.pointee.lpVtbl.pointee.First(_this, &_result))
        return WindowsFoundationCollections_IIteratorProjection.IKeyValuePair_String_Object.toSwift(consuming: &_result)
    }

    deinit {
        if let _iobservableMap { IUnknownPointer.release(_iobservableMap) }
        if let _imap { IUnknownPointer.release(_imap) }
        if let _iiterable { IUnknownPointer.release(_iiterable) }
    }
}

public final class WindowsFoundationCollections_IVectorChangedEventArgsProjection: WinRTProjectionBase<WindowsFoundationCollections_IVectorChangedEventArgsProjection>, WinRTProjection, WindowsFoundationCollections_IVectorChangedEventArgsProtocol {
    public typealias SwiftObject = WindowsFoundationCollections_IVectorChangedEventArgs
    public typealias COMInterface = CWindowsFoundation.__x_ABI_CWindows_CFoundation_CCollections_CIVectorChangedEventArgs
    public typealias COMVirtualTable = CWindowsFoundation.__x_ABI_CWindows_CFoundation_CCollections_CIVectorChangedEventArgsVtbl

    public static let iid = IID(0x575933DF, 0x34FE, 0x4480, 0xAF15, 0x07691F3D5D9B)
    public static let runtimeClassName = "Windows.Foundation.Collections.IVectorChangedEventArgs"

    // Windows.Foundation.Collections.IVectorChangedEventArgs
    public var collectionChange: WindowsFoundationCollections_CollectionChange {
        get throws {
            var _result: __x_ABI_CWindows_CFoundation_CCollections_CCollectionChange = WindowsFoundationCollections_CollectionChange.abiDefaultValue
            try HResult.throwIfFailed(comPointer.pointee.lpVtbl.pointee.get_CollectionChange(comPointer, &_result))
            return WindowsFoundationCollections_CollectionChange.toSwift(_result)
        }
    }

    public var index: Swift.UInt32 {
        get throws {
            var _result: UINT32 = 0
            try HResult.throwIfFailed(comPointer.pointee.lpVtbl.pointee.get_Index(comPointer, &_result))
            return _result
        }
    }
}

public enum WindowsFoundationCollections_IVectorViewProjection {
}

public enum WindowsFoundationCollections_IVectorProjection {
}

public enum WindowsFoundationCollections_MapChangedEventHandlerProjection {
}

public final class WindowsFoundationCollections_PropertySet: WinRTProjectionBase<WindowsFoundationCollections_PropertySet>, WinRTProjection, WindowsFoundationCollections_IPropertySetProtocol, WindowsFoundationCollections_IObservableMapProtocol, WindowsFoundationCollections_IMapProtocol, WindowsFoundationCollections_IIterableProtocol {
    public typealias SwiftObject = WindowsFoundationCollections_PropertySet
    public typealias COMInterface = CWindowsFoundation.__x_ABI_CWindows_CFoundation_CCollections_CIPropertySet
    public typealias COMVirtualTable = CWindowsFoundation.__x_ABI_CWindows_CFoundation_CCollections_CIPropertySetVtbl

    public static let iid = IID(0x8A43ED9F, 0xF4E6, 0x4421, 0xACF9, 0x1DAB2986820C)
    public static let runtimeClassName = "Windows.Foundation.Collections.PropertySet"

    public typealias K = Swift.String
    public typealias V = WindowsRuntime.IInspectable?
    public typealias T = WindowsFoundationCollections_IKeyValuePair<Swift.String, WindowsRuntime.IInspectable?>?

    // Windows.Foundation.Collections.IPropertySet
    // Windows.Foundation.Collections.IObservableMap`2<String, Object>
    private var _iobservableMap: UnsafeMutablePointer<__FIObservableMap_2_HSTRING_IInspectable>! = nil

    private func _getIObservableMap() throws -> UnsafeMutablePointer<__FIObservableMap_2_HSTRING_IInspectable> {
        let iid = IID(0x236AAC9D, 0xFB12, 0x5C4D, 0xA41C, 0x9E445FB4D7EC)
        _iobservableMap = try _queryInterfacePointer(iid).cast(to: __FIObservableMap_2_HSTRING_IInspectable.self)
        return _iobservableMap
    }

    // Windows.Foundation.Collections.IMap`2<String, Object>
    private var _imap: UnsafeMutablePointer<__FIMap_2_HSTRING_IInspectable>! = nil

    private func _getIMap() throws -> UnsafeMutablePointer<__FIMap_2_HSTRING_IInspectable> {
        let iid = IID(0x1B0D3570, 0x0877, 0x5EC2, 0x8A2C, 0x3B9539506ACA)
        _imap = try _queryInterfacePointer(iid).cast(to: __FIMap_2_HSTRING_IInspectable.self)
        return _imap
    }

    public var size: Swift.UInt32 {
        get throws {
            let _this = try _getIMap()
            var _result: UINT32 = 0
            try HResult.throwIfFailed(_this.pointee.lpVtbl.pointee.get_Size(_this, &_result))
            return _result
        }
    }

    public func lookup(_ key: Swift.String) throws -> WindowsRuntime.IInspectable? {
        let _this = try _getIMap()
        var key = try WindowsRuntime.HStringProjection.toABI(key)
        defer { WindowsRuntime.HStringProjection.release(&key) }
        var _result: IInspectableProjection.COMPointer? = nil
        try HResult.throwIfFailed(_this.pointee.lpVtbl.pointee.Lookup(_this, key, &_result))
        return WindowsRuntime.IInspectableProjection.toSwift(consuming: &_result)
    }

    public func hasKey(_ key: Swift.String) throws -> Swift.Bool {
        let _this = try _getIMap()
        var key = try WindowsRuntime.HStringProjection.toABI(key)
        defer { WindowsRuntime.HStringProjection.release(&key) }
        var _result: boolean = 0
        try HResult.throwIfFailed(_this.pointee.lpVtbl.pointee.HasKey(_this, key, &_result))
        return COM.BooleanProjection.toSwift(_result)
    }

    public func getView() throws -> WindowsFoundationCollections_IMapView<Swift.String, WindowsRuntime.IInspectable?>? {
        let _this = try _getIMap()
        var _result: UnsafeMutablePointer<__FIMapView_2_HSTRING_IInspectable>? = nil
        try HResult.throwIfFailed(_this.pointee.lpVtbl.pointee.GetView(_this, &_result))
        return WindowsFoundationCollections_IMapViewProjection.String_Object.toSwift(consuming: &_result)
    }

    public func insert(_ key: Swift.String, _ value: WindowsRuntime.IInspectable?) throws -> Swift.Bool {
        let _this = try _getIMap()
        var key = try WindowsRuntime.HStringProjection.toABI(key)
        defer { WindowsRuntime.HStringProjection.release(&key) }
        var value = try WindowsRuntime.IInspectableProjection.toABI(value)
        defer { WindowsRuntime.IInspectableProjection.release(&value) }
        var _result: boolean = 0
        try HResult.throwIfFailed(_this.pointee.lpVtbl.pointee.Insert(_this, key, value, &_result))
        return COM.BooleanProjection.toSwift(_result)
    }

    public func remove(_ key: Swift.String) throws {
        let _this = try _getIMap()
        var key = try WindowsRuntime.HStringProjection.toABI(key)
        defer { WindowsRuntime.HStringProjection.release(&key) }
        try HResult.throwIfFailed(_this.pointee.lpVtbl.pointee.Remove(_this, key))
    }

    public func clear() throws {
        let _this = try _getIMap()
        try HResult.throwIfFailed(_this.pointee.lpVtbl.pointee.Clear(_this))
    }

    // Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Object>>
    private var _iiterable: UnsafeMutablePointer<__FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable>! = nil

    private func _getIIterable() throws -> UnsafeMutablePointer<__FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable> {
        let iid = IID(0xFE2F3D47, 0x5D47, 0x5499, 0x8374, 0x430C7CDA0204)
        _iiterable = try _queryInterfacePointer(iid).cast(to: __FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable.self)
        return _iiterable
    }

    public func first() throws -> WindowsFoundationCollections_IIterator<WindowsFoundationCollections_IKeyValuePair<Swift.String, WindowsRuntime.IInspectable?>?>? {
        let _this = try _getIIterable()
        var _result: UnsafeMutablePointer<__FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable>? = nil
        try HResult.throwIfFailed(_this.pointee.lpVtbl.pointee.First(_this, &_result))
        return WindowsFoundationCollections_IIteratorProjection.IKeyValuePair_String_Object.toSwift(consuming: &_result)
    }

    deinit {
        if let _iobservableMap { IUnknownPointer.release(_iobservableMap) }
        if let _imap { IUnknownPointer.release(_imap) }
        if let _iiterable { IUnknownPointer.release(_iiterable) }
    }

    public required init(transferringRef comPointer: COMPointer) {
        super.init(transferringRef: comPointer)
    }

    // IActivationFactory
    private static var _iactivationFactory: UnsafeMutablePointer<IActivationFactory>! = nil

    private static func _getIActivationFactory() throws -> UnsafeMutablePointer<IActivationFactory> {
        let iid = IID(0x00000035, 0x0000, 0x0000, 0xC000, 0x000000000046)
        _iactivationFactory = try _iactivationFactory ?? WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Foundation.Collections.PropertySet", iid: iid)
        return _iactivationFactory
    }

    public convenience init() throws {
        let _factory = try Self._getIActivationFactory()
        var inspectable: UnsafeMutablePointer<CWindowsFoundation.IInspectable>? = nil
        defer { IUnknownPointer.release(inspectable) }
        try HResult.throwIfFailed(_factory.pointee.lpVtbl.pointee.ActivateInstance(_factory, &inspectable))
        guard let inspectable else { throw COM.HResult.Error.noInterface }

        var iid = Self.iid
        var instance: UnsafeMutableRawPointer? = nil
        try HResult.throwIfFailed(inspectable.pointee.lpVtbl.pointee.QueryInterface(inspectable, &iid, &instance))
        guard let instance else { throw COM.HResult.Error.noInterface }

        self.init(transferringRef: instance.bindMemory(to: COMInterface.self, capacity: 1))
    }
}

public final class WindowsFoundationCollections_StringMap: WinRTProjectionBase<WindowsFoundationCollections_StringMap>, WinRTProjection, WindowsFoundationCollections_IMapProtocol, WindowsFoundationCollections_IIterableProtocol, WindowsFoundationCollections_IObservableMapProtocol {
    public typealias SwiftObject = WindowsFoundationCollections_StringMap
    public typealias COMInterface = CWindowsFoundation.__FIMap_2_HSTRING_HSTRING
    public typealias COMVirtualTable = CWindowsFoundation.__FIMap_2_HSTRING_HSTRINGVtbl

    public static let iid = IID(0xF6D1F700, 0x49C2, 0x52AE, 0x8154, 0x826F9908773C)
    public static let runtimeClassName = "Windows.Foundation.Collections.StringMap"

    public typealias K = Swift.String
    public typealias V = Swift.String
    public typealias T = WindowsFoundationCollections_IKeyValuePair<Swift.String, Swift.String>?

    // Windows.Foundation.Collections.IMap`2<String, String>
    public var size: Swift.UInt32 {
        get throws {
            var _result: UINT32 = 0
            try HResult.throwIfFailed(comPointer.pointee.lpVtbl.pointee.get_Size(comPointer, &_result))
            return _result
        }
    }

    public func lookup(_ key: Swift.String) throws -> Swift.String {
        var key = try WindowsRuntime.HStringProjection.toABI(key)
        defer { WindowsRuntime.HStringProjection.release(&key) }
        var _result: CWindowsFoundation.HSTRING? = nil
        try HResult.throwIfFailed(comPointer.pointee.lpVtbl.pointee.Lookup(comPointer, key, &_result))
        return WindowsRuntime.HStringProjection.toSwift(consuming: &_result)
    }

    public func hasKey(_ key: Swift.String) throws -> Swift.Bool {
        var key = try WindowsRuntime.HStringProjection.toABI(key)
        defer { WindowsRuntime.HStringProjection.release(&key) }
        var _result: boolean = 0
        try HResult.throwIfFailed(comPointer.pointee.lpVtbl.pointee.HasKey(comPointer, key, &_result))
        return COM.BooleanProjection.toSwift(_result)
    }

    public func getView() throws -> WindowsFoundationCollections_IMapView<Swift.String, Swift.String>? {
        var _result: UnsafeMutablePointer<__FIMapView_2_HSTRING_HSTRING>? = nil
        try HResult.throwIfFailed(comPointer.pointee.lpVtbl.pointee.GetView(comPointer, &_result))
        return WindowsFoundationCollections_IMapViewProjection.String_String.toSwift(consuming: &_result)
    }

    public func insert(_ key: Swift.String, _ value: Swift.String) throws -> Swift.Bool {
        var key = try WindowsRuntime.HStringProjection.toABI(key)
        defer { WindowsRuntime.HStringProjection.release(&key) }
        var value = try WindowsRuntime.HStringProjection.toABI(value)
        defer { WindowsRuntime.HStringProjection.release(&value) }
        var _result: boolean = 0
        try HResult.throwIfFailed(comPointer.pointee.lpVtbl.pointee.Insert(comPointer, key, value, &_result))
        return COM.BooleanProjection.toSwift(_result)
    }

    public func remove(_ key: Swift.String) throws {
        var key = try WindowsRuntime.HStringProjection.toABI(key)
        defer { WindowsRuntime.HStringProjection.release(&key) }
        try HResult.throwIfFailed(comPointer.pointee.lpVtbl.pointee.Remove(comPointer, key))
    }

    public func clear() throws {
        try HResult.throwIfFailed(comPointer.pointee.lpVtbl.pointee.Clear(comPointer))
    }

    // Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, String>>
    private var _iiterable: UnsafeMutablePointer<__FIIterable_1___FIKeyValuePair_2_HSTRING_HSTRING>! = nil

    private func _getIIterable() throws -> UnsafeMutablePointer<__FIIterable_1___FIKeyValuePair_2_HSTRING_HSTRING> {
        let iid = IID(0xE9BDAAF0, 0xCBF6, 0x5C72, 0xBE90, 0x29CBF3A1319B)
        _iiterable = try _queryInterfacePointer(iid).cast(to: __FIIterable_1___FIKeyValuePair_2_HSTRING_HSTRING.self)
        return _iiterable
    }

    public func first() throws -> WindowsFoundationCollections_IIterator<WindowsFoundationCollections_IKeyValuePair<Swift.String, Swift.String>?>? {
        let _this = try _getIIterable()
        var _result: UnsafeMutablePointer<__FIIterator_1___FIKeyValuePair_2_HSTRING_HSTRING>? = nil
        try HResult.throwIfFailed(_this.pointee.lpVtbl.pointee.First(_this, &_result))
        return WindowsFoundationCollections_IIteratorProjection.IKeyValuePair_String_String.toSwift(consuming: &_result)
    }

    // Windows.Foundation.Collections.IObservableMap`2<String, String>
    private var _iobservableMap: UnsafeMutablePointer<__FIObservableMap_2_HSTRING_HSTRING>! = nil

    private func _getIObservableMap() throws -> UnsafeMutablePointer<__FIObservableMap_2_HSTRING_HSTRING> {
        let iid = IID(0x1E036276, 0x2F60, 0x55F6, 0xB7F3, 0xF86079E6900B)
        _iobservableMap = try _queryInterfacePointer(iid).cast(to: __FIObservableMap_2_HSTRING_HSTRING.self)
        return _iobservableMap
    }

    deinit {
        if let _iiterable { IUnknownPointer.release(_iiterable) }
        if let _iobservableMap { IUnknownPointer.release(_iobservableMap) }
    }

    public required init(transferringRef comPointer: COMPointer) {
        super.init(transferringRef: comPointer)
    }

    // IActivationFactory
    private static var _iactivationFactory: UnsafeMutablePointer<IActivationFactory>! = nil

    private static func _getIActivationFactory() throws -> UnsafeMutablePointer<IActivationFactory> {
        let iid = IID(0x00000035, 0x0000, 0x0000, 0xC000, 0x000000000046)
        _iactivationFactory = try _iactivationFactory ?? WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Foundation.Collections.StringMap", iid: iid)
        return _iactivationFactory
    }

    public convenience init() throws {
        let _factory = try Self._getIActivationFactory()
        var inspectable: UnsafeMutablePointer<CWindowsFoundation.IInspectable>? = nil
        defer { IUnknownPointer.release(inspectable) }
        try HResult.throwIfFailed(_factory.pointee.lpVtbl.pointee.ActivateInstance(_factory, &inspectable))
        guard let inspectable else { throw COM.HResult.Error.noInterface }

        var iid = Self.iid
        var instance: UnsafeMutableRawPointer? = nil
        try HResult.throwIfFailed(inspectable.pointee.lpVtbl.pointee.QueryInterface(inspectable, &iid, &instance))
        guard let instance else { throw COM.HResult.Error.noInterface }

        self.init(transferringRef: instance.bindMemory(to: COMInterface.self, capacity: 1))
    }
}

public final class WindowsFoundationCollections_ValueSet: WinRTProjectionBase<WindowsFoundationCollections_ValueSet>, WinRTProjection, WindowsFoundationCollections_IPropertySetProtocol, WindowsFoundationCollections_IObservableMapProtocol, WindowsFoundationCollections_IMapProtocol, WindowsFoundationCollections_IIterableProtocol {
    public typealias SwiftObject = WindowsFoundationCollections_ValueSet
    public typealias COMInterface = CWindowsFoundation.__x_ABI_CWindows_CFoundation_CCollections_CIPropertySet
    public typealias COMVirtualTable = CWindowsFoundation.__x_ABI_CWindows_CFoundation_CCollections_CIPropertySetVtbl

    public static let iid = IID(0x8A43ED9F, 0xF4E6, 0x4421, 0xACF9, 0x1DAB2986820C)
    public static let runtimeClassName = "Windows.Foundation.Collections.ValueSet"

    public typealias K = Swift.String
    public typealias V = WindowsRuntime.IInspectable?
    public typealias T = WindowsFoundationCollections_IKeyValuePair<Swift.String, WindowsRuntime.IInspectable?>?

    // Windows.Foundation.Collections.IPropertySet
    // Windows.Foundation.Collections.IObservableMap`2<String, Object>
    private var _iobservableMap: UnsafeMutablePointer<__FIObservableMap_2_HSTRING_IInspectable>! = nil

    private func _getIObservableMap() throws -> UnsafeMutablePointer<__FIObservableMap_2_HSTRING_IInspectable> {
        let iid = IID(0x236AAC9D, 0xFB12, 0x5C4D, 0xA41C, 0x9E445FB4D7EC)
        _iobservableMap = try _queryInterfacePointer(iid).cast(to: __FIObservableMap_2_HSTRING_IInspectable.self)
        return _iobservableMap
    }

    // Windows.Foundation.Collections.IMap`2<String, Object>
    private var _imap: UnsafeMutablePointer<__FIMap_2_HSTRING_IInspectable>! = nil

    private func _getIMap() throws -> UnsafeMutablePointer<__FIMap_2_HSTRING_IInspectable> {
        let iid = IID(0x1B0D3570, 0x0877, 0x5EC2, 0x8A2C, 0x3B9539506ACA)
        _imap = try _queryInterfacePointer(iid).cast(to: __FIMap_2_HSTRING_IInspectable.self)
        return _imap
    }

    public var size: Swift.UInt32 {
        get throws {
            let _this = try _getIMap()
            var _result: UINT32 = 0
            try HResult.throwIfFailed(_this.pointee.lpVtbl.pointee.get_Size(_this, &_result))
            return _result
        }
    }

    public func lookup(_ key: Swift.String) throws -> WindowsRuntime.IInspectable? {
        let _this = try _getIMap()
        var key = try WindowsRuntime.HStringProjection.toABI(key)
        defer { WindowsRuntime.HStringProjection.release(&key) }
        var _result: IInspectableProjection.COMPointer? = nil
        try HResult.throwIfFailed(_this.pointee.lpVtbl.pointee.Lookup(_this, key, &_result))
        return WindowsRuntime.IInspectableProjection.toSwift(consuming: &_result)
    }

    public func hasKey(_ key: Swift.String) throws -> Swift.Bool {
        let _this = try _getIMap()
        var key = try WindowsRuntime.HStringProjection.toABI(key)
        defer { WindowsRuntime.HStringProjection.release(&key) }
        var _result: boolean = 0
        try HResult.throwIfFailed(_this.pointee.lpVtbl.pointee.HasKey(_this, key, &_result))
        return COM.BooleanProjection.toSwift(_result)
    }

    public func getView() throws -> WindowsFoundationCollections_IMapView<Swift.String, WindowsRuntime.IInspectable?>? {
        let _this = try _getIMap()
        var _result: UnsafeMutablePointer<__FIMapView_2_HSTRING_IInspectable>? = nil
        try HResult.throwIfFailed(_this.pointee.lpVtbl.pointee.GetView(_this, &_result))
        return WindowsFoundationCollections_IMapViewProjection.String_Object.toSwift(consuming: &_result)
    }

    public func insert(_ key: Swift.String, _ value: WindowsRuntime.IInspectable?) throws -> Swift.Bool {
        let _this = try _getIMap()
        var key = try WindowsRuntime.HStringProjection.toABI(key)
        defer { WindowsRuntime.HStringProjection.release(&key) }
        var value = try WindowsRuntime.IInspectableProjection.toABI(value)
        defer { WindowsRuntime.IInspectableProjection.release(&value) }
        var _result: boolean = 0
        try HResult.throwIfFailed(_this.pointee.lpVtbl.pointee.Insert(_this, key, value, &_result))
        return COM.BooleanProjection.toSwift(_result)
    }

    public func remove(_ key: Swift.String) throws {
        let _this = try _getIMap()
        var key = try WindowsRuntime.HStringProjection.toABI(key)
        defer { WindowsRuntime.HStringProjection.release(&key) }
        try HResult.throwIfFailed(_this.pointee.lpVtbl.pointee.Remove(_this, key))
    }

    public func clear() throws {
        let _this = try _getIMap()
        try HResult.throwIfFailed(_this.pointee.lpVtbl.pointee.Clear(_this))
    }

    // Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Object>>
    private var _iiterable: UnsafeMutablePointer<__FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable>! = nil

    private func _getIIterable() throws -> UnsafeMutablePointer<__FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable> {
        let iid = IID(0xFE2F3D47, 0x5D47, 0x5499, 0x8374, 0x430C7CDA0204)
        _iiterable = try _queryInterfacePointer(iid).cast(to: __FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable.self)
        return _iiterable
    }

    public func first() throws -> WindowsFoundationCollections_IIterator<WindowsFoundationCollections_IKeyValuePair<Swift.String, WindowsRuntime.IInspectable?>?>? {
        let _this = try _getIIterable()
        var _result: UnsafeMutablePointer<__FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable>? = nil
        try HResult.throwIfFailed(_this.pointee.lpVtbl.pointee.First(_this, &_result))
        return WindowsFoundationCollections_IIteratorProjection.IKeyValuePair_String_Object.toSwift(consuming: &_result)
    }

    deinit {
        if let _iobservableMap { IUnknownPointer.release(_iobservableMap) }
        if let _imap { IUnknownPointer.release(_imap) }
        if let _iiterable { IUnknownPointer.release(_iiterable) }
    }

    public required init(transferringRef comPointer: COMPointer) {
        super.init(transferringRef: comPointer)
    }

    // IActivationFactory
    private static var _iactivationFactory: UnsafeMutablePointer<IActivationFactory>! = nil

    private static func _getIActivationFactory() throws -> UnsafeMutablePointer<IActivationFactory> {
        let iid = IID(0x00000035, 0x0000, 0x0000, 0xC000, 0x000000000046)
        _iactivationFactory = try _iactivationFactory ?? WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Foundation.Collections.ValueSet", iid: iid)
        return _iactivationFactory
    }

    public convenience init() throws {
        let _factory = try Self._getIActivationFactory()
        var inspectable: UnsafeMutablePointer<CWindowsFoundation.IInspectable>? = nil
        defer { IUnknownPointer.release(inspectable) }
        try HResult.throwIfFailed(_factory.pointee.lpVtbl.pointee.ActivateInstance(_factory, &inspectable))
        guard let inspectable else { throw COM.HResult.Error.noInterface }

        var iid = Self.iid
        var instance: UnsafeMutableRawPointer? = nil
        try HResult.throwIfFailed(inspectable.pointee.lpVtbl.pointee.QueryInterface(inspectable, &iid, &instance))
        guard let instance else { throw COM.HResult.Error.noInterface }

        self.init(transferringRef: instance.bindMemory(to: COMInterface.self, capacity: 1))
    }
}

public enum WindowsFoundationCollections_VectorChangedEventHandlerProjection {
}