// Generated by swift-winrt
// swiftlint:disable all

import CWindowsFoundation
import WindowsRuntime
import struct Foundation.UUID

extension WindowsFoundationCollections_IMapViewProjection {
    public enum String_String: WinRTTwoWayProjection {
        public typealias SwiftObject = WindowsFoundationCollections_IMapView<Swift.String, Swift.String>
        public typealias COMInterface = CWindowsFoundation.__FIMapView_2_HSTRING_HSTRING
        public typealias COMVirtualTable = CWindowsFoundation.__FIMapView_2_HSTRING_HSTRINGVtbl

        public static let iid = IID(0xAC7F26F2, 0xFEB7, 0x5B2A, 0x8AC4, 0x345BC62CAEDE)

        public static var virtualTablePointer: COMVirtualTablePointer {
            fatalError("Not implemented: \(#function)")
        }

        public static let runtimeClassName = "Windows.Foundation.Collections.IMapView`2<String, String>"

        public static func toSwift(transferringRef comPointer: COMPointer) -> SwiftObject {
            toSwift(transferringRef: comPointer, implementation: Implementation.self)
        }

        public static func toCOM(_ object: SwiftObject) throws -> COMPointer {
            try toCOM(object, implementation: Implementation.self)
        }

        private final class Implementation: WinRTImport<String_String>, WindowsFoundationCollections_IMapViewProtocol {
            public typealias T = WindowsFoundationCollections_IKeyValuePair<Swift.String, Swift.String>?

            // Windows.Foundation.Collections.IMapView`2<String, String>
            public var size: Swift.UInt32 {
                get throws {
                    var _result: UINT32 = 0
                    try HResult.throwIfFailed(comPointer.pointee.lpVtbl.pointee.get_Size(comPointer, &_result))
                    return _result
                }
            }

            public func lookup(_ key: Swift.String) throws -> Swift.String {
                var key = try WindowsRuntime.HStringProjection.toABI(key)
                defer { WindowsRuntime.HStringProjection.release(&key) }
                var _result: CWindowsFoundation.HSTRING? = nil
                try HResult.throwIfFailed(comPointer.pointee.lpVtbl.pointee.Lookup(comPointer, key, &_result))
                return WindowsRuntime.HStringProjection.toSwift(consuming: &_result)
            }

            public func hasKey(_ key: Swift.String) throws -> Swift.Bool {
                var key = try WindowsRuntime.HStringProjection.toABI(key)
                defer { WindowsRuntime.HStringProjection.release(&key) }
                var _result: boolean = 0
                try HResult.throwIfFailed(comPointer.pointee.lpVtbl.pointee.HasKey(comPointer, key, &_result))
                return COM.BooleanProjection.toSwift(_result)
            }

            public func split(_ first: inout WindowsFoundationCollections_IMapView<Swift.String, Swift.String>?, _ second: inout WindowsFoundationCollections_IMapView<Swift.String, Swift.String>?) throws {
                var _first: UnsafeMutablePointer<__FIMapView_2_HSTRING_HSTRING>? = nil
                defer { WindowsFoundationCollections_IMapViewProjection.String_String.release(&_first) }
                var _second: UnsafeMutablePointer<__FIMapView_2_HSTRING_HSTRING>? = nil
                defer { WindowsFoundationCollections_IMapViewProjection.String_String.release(&_second) }
                try HResult.throwIfFailed(comPointer.pointee.lpVtbl.pointee.Split(comPointer, &_first, &_second))
                first = WindowsFoundationCollections_IMapViewProjection.String_String.toSwift(consuming: &_first)
                second = WindowsFoundationCollections_IMapViewProjection.String_String.toSwift(consuming: &_second)
            }

            // Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, String>>
            private var _iiterable: UnsafeMutablePointer<__FIIterable_1___FIKeyValuePair_2_HSTRING_HSTRING>! = nil

            private func _getIIterable() throws -> UnsafeMutablePointer<__FIIterable_1___FIKeyValuePair_2_HSTRING_HSTRING> {
                let iid = IID(0xE9BDAAF0, 0xCBF6, 0x5C72, 0xBE90, 0x29CBF3A1319B)
                _iiterable = try _queryInterfacePointer(iid).cast(to: __FIIterable_1___FIKeyValuePair_2_HSTRING_HSTRING.self)
                return _iiterable
            }

            public func first() throws -> WindowsFoundationCollections_IIterator<WindowsFoundationCollections_IKeyValuePair<Swift.String, Swift.String>?>? {
                let _this = try _getIIterable()
                var _result: UnsafeMutablePointer<__FIIterator_1___FIKeyValuePair_2_HSTRING_HSTRING>? = nil
                try HResult.throwIfFailed(_this.pointee.lpVtbl.pointee.First(_this, &_result))
                return WindowsFoundationCollections_IIteratorProjection.IKeyValuePair_String_String.toSwift(consuming: &_result)
            }

            deinit {
                if let _iiterable { IUnknownPointer.release(_iiterable) }
            }
        }
    }
}