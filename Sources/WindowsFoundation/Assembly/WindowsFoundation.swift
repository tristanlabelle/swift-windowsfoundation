// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import struct Foundation.UUID

/// Represents a method that handles the completed event of an asynchronous action.
/// - Parameter asyncInfo: The asynchronous action.
/// - Parameter asyncStatus: One of the enumeration values.
public typealias WindowsFoundation_AsyncActionCompletedHandler = (WindowsFoundation_IAsyncAction?, WindowsFoundation_AsyncStatus) throws -> Swift.Void

/// Represents a method that handles progress update events of an asynchronous action that provides progress updates.
/// - Parameter progressInfo: The progress information.
/// - Parameter asyncInfo: The asynchronous action.
public typealias WindowsFoundation_AsyncActionProgressHandler<TProgress> = (WindowsFoundation_IAsyncActionWithProgress<TProgress>?, TProgress) throws -> Swift.Void

/// Represents a method that handles the completed event of an asynchronous action that provides progress updates.
/// - Parameter asyncInfo: The asynchronous action.
/// - Parameter asyncStatus: One of the enumeration values.
public typealias WindowsFoundation_AsyncActionWithProgressCompletedHandler<TProgress> = (WindowsFoundation_IAsyncActionWithProgress<TProgress>?, WindowsFoundation_AsyncStatus) throws -> Swift.Void

/// Represents a method that handles the completed event of an asynchronous operation.
/// - Parameter asyncInfo: The asynchronous operation.
/// - Parameter asyncStatus: One of the enumeration values.
public typealias WindowsFoundation_AsyncOperationCompletedHandler<TResult> = (WindowsFoundation_IAsyncOperation<TResult>?, WindowsFoundation_AsyncStatus) throws -> Swift.Void

/// Represents a method that handles progress update events of an asynchronous operation that provides progress updates.
/// - Parameter asyncInfo: The asynchronous operation.
/// - Parameter progressInfo: The progress information.
public typealias WindowsFoundation_AsyncOperationProgressHandler<TResult, TProgress> = (WindowsFoundation_IAsyncOperationWithProgress<TResult, TProgress>?, TProgress) throws -> Swift.Void

/// Represents a method that handles the completed event of an asynchronous operation that provides progress updates.
/// - Parameter asyncInfo: The asynchronous operation.
/// - Parameter asyncStatus: One of the enumeration values.
public typealias WindowsFoundation_AsyncOperationWithProgressCompletedHandler<TResult, TProgress> = (WindowsFoundation_IAsyncOperationWithProgress<TResult, TProgress>?, WindowsFoundation_AsyncStatus) throws -> Swift.Void

/// Specifies the status of an asynchronous operation.
public struct WindowsFoundation_AsyncStatus: RawRepresentable, Hashable, Codable {
    public var rawValue: Swift.Int32

    public init(rawValue: Swift.Int32 = 0) {
        self.rawValue = rawValue
    }

    /// The operation was canceled.
    public static let canceled = Self(rawValue: 2)

    /// The operation has completed.
    public static let completed = Self(rawValue: 1)

    /// The operation has encountered an error.
    public static let error = Self(rawValue: 3)

    /// The operation has started.
    public static let started = Self(rawValue: 0)
}

/// Represents an instant in time, typically expressed as a date and time of day.
public struct WindowsFoundation_DateTime: Hashable, Codable {
    /// A 64-bit signed integer that represents a point in time as the number of 100-nanosecond intervals prior to or after midnight on January 1, 1601 (according to the Gregorian Calendar).
    public var universalTime: Swift.Int64

    public init() {
        self.universalTime = 0
    }

    public init(universalTime: Swift.Int64) {
        self.universalTime = universalTime
    }
}

/// Represents a method that handles the completed event of a deferred action.
public typealias WindowsFoundation_DeferralCompletedHandler = () throws -> Swift.Void

/// Represents a method that handles general events.
/// - Parameter args: The event data.
/// - Parameter sender: The event source.
public typealias WindowsFoundation_EventHandler<T> = (WindowsRuntime.IInspectable?, T) throws -> Swift.Void

public protocol WindowsFoundation_IAsyncActionProtocol: WindowsFoundation_IAsyncInfoProtocol {
    /// Gets or sets the method that handles the action completed notification.
    /// - Returns: The method that handles the notification.
    var completed: WindowsFoundation_AsyncActionCompletedHandler? { get throws }
    func completed(_ newValue: WindowsFoundation_AsyncActionCompletedHandler?) throws

    /// Returns the results of the action.
    func getResults() throws
}

/// Represents an asynchronous action. This is the return type for many Windows Runtime asynchronous methods that don't have a result object, and don't report ongoing progress.
public typealias WindowsFoundation_IAsyncAction = any WindowsFoundation_IAsyncActionProtocol

public protocol WindowsFoundation_IAsyncActionWithProgressProtocol<TProgress>: WindowsFoundation_IAsyncInfoProtocol {
    associatedtype TProgress

    /// Gets or sets the callback method that receives progress notification.
    /// - Returns: A reference to the callback method that handles progress notifications. Implement the AsyncActionProgressHandler(TProgress) delegate to define your callback. *TProgress* defines the progress unit type, which varies by method implementation.
    var progress: WindowsFoundation_AsyncActionProgressHandler<TProgress>? { get throws }
    func progress(_ newValue: WindowsFoundation_AsyncActionProgressHandler<TProgress>?) throws

    /// Gets or sets the method that handles the action completed notification.
    /// - Returns: The method that handles the notification.
    var completed: WindowsFoundation_AsyncActionWithProgressCompletedHandler<TProgress>? { get throws }
    func completed(_ newValue: WindowsFoundation_AsyncActionWithProgressCompletedHandler<TProgress>?) throws

    /// Returns the results of the action.
    func getResults() throws
}

/// Represents an asynchronous action that can report progress updates to callers. This is the return type for all Windows Runtime asynchronous methods that don't have a result object, but do report progress to callback listeners.
public typealias WindowsFoundation_IAsyncActionWithProgress<TProgress> = any WindowsFoundation_IAsyncActionWithProgressProtocol<TProgress>

public protocol WindowsFoundation_IAsyncInfoProtocol: IInspectableProtocol {
    /// Gets a string that describes an error condition of the asynchronous operation.
    /// - Returns: The error string.
    var errorCode: COM.HResult { get throws }

    /// Gets the handle of the asynchronous operation.
    /// - Returns: The handle of the asynchronous operation.
    var id: Swift.UInt32 { get throws }

    /// Gets a value that indicates the status of the asynchronous operation.
    /// - Returns: The status of the operation, as a value of the enumeration. A value of **Completed** indicates that the method has returned. The **Started** value represents a transition state before any of the other 3 final results (**Completed**, **Error**, **Canceled**) can be determined by the method's invocation.
    var status: WindowsFoundation_AsyncStatus { get throws }

    /// Cancels the asynchronous operation.
    func cancel() throws

    /// Closes the asynchronous operation.
    func close() throws
}

/// Supports asynchronous actions and operations. IAsyncInfo is a base interface for IAsyncAction, IAsyncActionWithProgress<TProgress>, IAsyncOperation<TResult> and IAsyncOperationWithProgress<TResult,TProgress>, each of which support combinations of return type and progress for an asynchronous method.
public typealias WindowsFoundation_IAsyncInfo = any WindowsFoundation_IAsyncInfoProtocol

public protocol WindowsFoundation_IAsyncOperationWithProgressProtocol<TResult, TProgress>: WindowsFoundation_IAsyncInfoProtocol {
    associatedtype TResult
    associatedtype TProgress

    /// Gets or sets the method that handles progress notifications.
    /// - Returns: A reference to the callback method that handles progress notifications. Implement the AsyncOperationProgressHandler<TResult, TProgress> delegate to define your callback. *TProgress* defines the progress unit type, which varies by method implementation.
    var progress: WindowsFoundation_AsyncOperationProgressHandler<TResult, TProgress>? { get throws }
    func progress(_ newValue: WindowsFoundation_AsyncOperationProgressHandler<TResult, TProgress>?) throws

    /// Gets or sets the method that handles the operation completed notification.
    /// - Returns: The method that handles the notification.
    var completed: WindowsFoundation_AsyncOperationWithProgressCompletedHandler<TResult, TProgress>? { get throws }
    func completed(_ newValue: WindowsFoundation_AsyncOperationWithProgressCompletedHandler<TResult, TProgress>?) throws

    /// Returns the results of the operation.
    /// - Returns: The results of the operation.
    func getResults() throws -> TResult
}

/// Represents an asynchronous operation that can report progress updates to callers. This is the return type for many Windows Runtime asynchronous methods that have results and also report progress.
public typealias WindowsFoundation_IAsyncOperationWithProgress<TResult, TProgress> = any WindowsFoundation_IAsyncOperationWithProgressProtocol<TResult, TProgress>

public protocol WindowsFoundation_IAsyncOperationProtocol<TResult>: WindowsFoundation_IAsyncInfoProtocol {
    associatedtype TResult

    /// Gets or sets the method that handles the operation completed notification.
    /// - Returns: The method that handles the notification.
    var completed: WindowsFoundation_AsyncOperationCompletedHandler<TResult>? { get throws }
    func completed(_ newValue: WindowsFoundation_AsyncOperationCompletedHandler<TResult>?) throws

    /// Returns the results of the operation.
    /// - Returns: The results of the operation.
    func getResults() throws -> TResult
}

/// Represents an asynchronous operation, which returns a result upon completion. This is the return type for many Windows Runtime asynchronous methods that have results but don't report progress.
public typealias WindowsFoundation_IAsyncOperation<TResult> = any WindowsFoundation_IAsyncOperationProtocol<TResult>

public protocol WindowsFoundation_IClosableProtocol: IInspectableProtocol {
    /// Releases system resources that are exposed by a Windows Runtime object.
    func close() throws
}

/// Defines a method to release allocated resources.
public typealias WindowsFoundation_IClosable = any WindowsFoundation_IClosableProtocol

internal protocol WindowsFoundation_IDeferralProtocol: WindowsFoundation_IClosableProtocol {
    func complete() throws
}

internal typealias WindowsFoundation_IDeferral = any WindowsFoundation_IDeferralProtocol

public protocol WindowsFoundation_IPropertyValueProtocol: IInspectableProtocol {
    /// Gets a value that indicates whether the property value is a scalar value.
    /// - Returns: True if the value is scalar; otherwise false.
    var isNumericScalar: Swift.Bool { get throws }

    /// Returns the type stored in the property value.
    /// - Returns: The type stored in the property value.
    var type: WindowsFoundation_PropertyType { get throws }

    /// Returns the byte value stored as a property value.
    /// - Returns: The value.
    func getUInt8() throws -> Swift.UInt8

    /// Returns the integer value stored as a property value.
    /// - Returns: The value.
    func getInt16() throws -> Swift.Int16

    /// Returns the unsigned integer value stored as a property value.
    /// - Returns: The value.
    func getUInt16() throws -> Swift.UInt16

    /// Returns the integer value stored as a property value.
    /// - Returns: The value.
    func getInt32() throws -> Swift.Int32

    /// Returns the unsigned integer value stored as a property value.
    /// - Returns: The value.
    func getUInt32() throws -> Swift.UInt32

    /// Returns the integer value stored as a property value.
    /// - Returns: The value.
    func getInt64() throws -> Swift.Int64

    /// Returns the unsigned integer value stored as a property value.
    /// - Returns: The value.
    func getUInt64() throws -> Swift.UInt64

    /// Returns the floating-point value stored as a property value.
    /// - Returns: The value.
    func getSingle() throws -> Swift.Float

    /// Returns the floating-point value stored as a property value.
    /// - Returns: The value.
    func getDouble() throws -> Swift.Double

    /// Returns the Unicode character stored as a property value.
    /// - Returns: The value.
    func getChar16() throws -> COM.WideChar

    /// Returns the Boolean value stored as a property value.
    /// - Returns: The value.
    func getBoolean() throws -> Swift.Bool

    /// Returns the string value stored as a property value.
    /// - Returns: The value.
    func getString() throws -> Swift.String

    /// Returns the GUID value stored as a property value.
    /// - Returns: The value.
    func getGuid() throws -> Foundation.UUID

    /// Returns the date and time value stored as a property value.
    /// - Returns: The value.
    func getDateTime() throws -> WindowsFoundation_DateTime

    /// Returns the time interval value stored as a property value.
    /// - Returns: The value.
    func getTimeSpan() throws -> WindowsFoundation_TimeSpan

    /// Returns the point structure stored as a property value.
    /// - Returns: The structure.
    func getPoint() throws -> WindowsFoundation_Point

    /// Returns the size structure stored as a property value.
    /// - Returns: The structure.
    func getSize() throws -> WindowsFoundation_Size

    /// Returns the rectangle structure stored as a property value.
    /// - Returns: The structure.
    func getRect() throws -> WindowsFoundation_Rect

    /// Returns the array of byte values stored as a property value.
    /// - Parameter value: The array of values.
    func getUInt8Array(_ value: inout [Swift.UInt8]) throws

    /// Returns the array of integer values stored as a property value.
    /// - Parameter value: The array of values.
    func getInt16Array(_ value: inout [Swift.Int16]) throws

    /// Returns the array of unsigned integer values stored as a property value.
    /// - Parameter value: The array of values.
    func getUInt16Array(_ value: inout [Swift.UInt16]) throws

    /// Returns the array of integer values stored as a property value.
    /// - Parameter value: The array of values.
    func getInt32Array(_ value: inout [Swift.Int32]) throws

    /// Returns the array of unsigned integer values stored as a property value.
    /// - Parameter value: The array of values.
    func getUInt32Array(_ value: inout [Swift.UInt32]) throws

    /// Returns the array of integer values stored as a property value.
    /// - Parameter value: The array of values.
    func getInt64Array(_ value: inout [Swift.Int64]) throws

    /// Returns the array of unsigned integer values stored as a property value.
    /// - Parameter value: The array of values.
    func getUInt64Array(_ value: inout [Swift.UInt64]) throws

    /// Returns the array of floating-point values stored as a property value.
    /// - Parameter value: The array of values.
    func getSingleArray(_ value: inout [Swift.Float]) throws

    /// Returns the array of floating-point values stored as a property value.
    /// - Parameter value: The array of values.
    func getDoubleArray(_ value: inout [Swift.Double]) throws

    /// Returns the array of Unicode characters stored as a property value.
    /// - Parameter value: The array of values.
    func getChar16Array(_ value: inout [COM.WideChar]) throws

    /// Returns the array of Boolean values stored as a property value.
    /// - Parameter value: The array of values.
    func getBooleanArray(_ value: inout [Swift.Bool]) throws

    /// Returns the array of string values stored as a property value.
    /// - Parameter value: The array of values.
    func getStringArray(_ value: inout [Swift.String]) throws

    /// Returns the array of inspectable objects stored as a property value.
    /// - Parameter value: The array of objects.
    func getInspectableArray(_ value: inout [WindowsRuntime.IInspectable?]) throws

    /// Returns the array of GUID values stored as a property value.
    /// - Parameter value: The array of values.
    func getGuidArray(_ value: inout [Foundation.UUID]) throws

    /// Returns the array of date and time values stored as a property value.
    /// - Parameter value: The array of values.
    func getDateTimeArray(_ value: inout [WindowsFoundation_DateTime]) throws

    /// Returns the array of time interval values stored as a property value.
    /// - Parameter value: The array of values.
    func getTimeSpanArray(_ value: inout [WindowsFoundation_TimeSpan]) throws

    /// Returns the array of point structures stored as a property value.
    /// - Parameter value: The array of structures.
    func getPointArray(_ value: inout [WindowsFoundation_Point]) throws

    /// Returns the array of size structures stored as a property value.
    /// - Parameter value: The array of structures.
    func getSizeArray(_ value: inout [WindowsFoundation_Size]) throws

    /// Returns the array of rectangle structures stored as a property value.
    /// - Parameter value: The array of structures.
    func getRectArray(_ value: inout [WindowsFoundation_Rect]) throws
}

/// Represents a value in a property store. You can't implement this interface, see Remarks.
public typealias WindowsFoundation_IPropertyValue = any WindowsFoundation_IPropertyValueProtocol

public protocol WindowsFoundation_IReferenceArrayProtocol<T>: WindowsFoundation_IPropertyValueProtocol {
    associatedtype T

    /// Gets the type that is represented as an IPropertyValue array.
    /// - Returns: The type.
    var value: [T] { get throws }
}

/// Enables arbitrary enumerations, structures, and delegate types to be used as an array of property values. You can't implement this interface, see Remarks.
public typealias WindowsFoundation_IReferenceArray<T> = any WindowsFoundation_IReferenceArrayProtocol<T>

public protocol WindowsFoundation_IReferenceProtocol<T>: WindowsFoundation_IPropertyValueProtocol {
    associatedtype T

    /// Gets the type that is represented as an IPropertyValue.
    /// - Returns: The type.
    var value: T { get throws }
}

/// Enables arbitrary enumerations, structures, and delegate types to be used as property values.
public typealias WindowsFoundation_IReference<T> = any WindowsFoundation_IReferenceProtocol<T>

public protocol WindowsFoundation_IStringableProtocol: IInspectableProtocol {
    /// Gets a string that represents the current object.
    /// - Returns: A string that represents the current object.
    func toString() throws -> Swift.String
}

/// Provides a way to represent the current object as a string.
public typealias WindowsFoundation_IStringable = any WindowsFoundation_IStringableProtocol

/// Represents x- and y-coordinate values that define a point in a two-dimensional plane.
public struct WindowsFoundation_Point: Hashable, Codable {
    /// The horizontal position of the point.
    public var x: Swift.Float/// The vertical position of the point.
    public var y: Swift.Float

    public init() {
        self.x = 0
        self.y = 0
    }

    public init(x: Swift.Float, y: Swift.Float) {
        self.x = x
        self.y = y
    }
}

/// Specifies property value types.
public struct WindowsFoundation_PropertyType: RawRepresentable, Hashable, Codable {
    public var rawValue: Swift.Int32

    public init(rawValue: Swift.Int32 = 0) {
        self.rawValue = rawValue
    }

    /// No type is specified.
    public static let empty = Self(rawValue: 0)

    /// A byte.
    public static let uint8 = Self(rawValue: 1)

    /// A signed 16-bit (2-byte) integer.
    public static let int16 = Self(rawValue: 2)

    /// An unsigned 16-bit (2-byte) integer.
    public static let uint16 = Self(rawValue: 3)

    /// A signed 32-bit (4-byte) integer.
    public static let int32 = Self(rawValue: 4)

    /// An unsigned 32-bit (4-byte) integer.
    public static let uint32 = Self(rawValue: 5)

    /// A signed 64-bit (8-byte) integer.
    public static let int64 = Self(rawValue: 6)

    /// An unsigned 64-bit (8-byte) integer.
    public static let uint64 = Self(rawValue: 7)

    /// A signed 32-bit (4-byte) floating-point number.
    public static let single = Self(rawValue: 8)

    /// A signed 64-bit (8-byte) floating-point number.
    public static let double = Self(rawValue: 9)

    /// An unsigned 16-bit (2-byte) code point.
    public static let char16 = Self(rawValue: 10)

    /// A value that can be only true or false.
    public static let boolean = Self(rawValue: 11)

    /// A Windows Runtime  HSTRING.
    public static let string = Self(rawValue: 12)

    /// An object implementing the IInspectable interface.
    public static let inspectable = Self(rawValue: 13)

    /// An instant in time, typically expressed as a date and time of day.
    public static let dateTime = Self(rawValue: 14)

    /// A time interval.
    public static let timeSpan = Self(rawValue: 15)

    /// A globally unique identifier.
    public static let guid = Self(rawValue: 16)

    /// An ordered pair of floating-point x- and y-coordinates that defines a point in a two-dimensional plane.
    public static let point = Self(rawValue: 17)

    /// An ordered pair of float-point numbers that specify a height and width.
    public static let size = Self(rawValue: 18)

    /// A set of four floating-point numbers that represent the location and size of a rectangle.
    public static let rect = Self(rawValue: 19)

    /// A type not specified in this enumeration.
    public static let otherType = Self(rawValue: 20)

    /// An array of Byte values.
    public static let uint8Array = Self(rawValue: 1025)

    /// An array of Int16 values.
    public static let int16Array = Self(rawValue: 1026)

    /// An array of UInt16 values.
    public static let uint16Array = Self(rawValue: 1027)

    /// An array of Int32 values.
    public static let int32Array = Self(rawValue: 1028)

    /// An array of UInt32 values.
    public static let uint32Array = Self(rawValue: 1029)

    /// An array of Int64 values.
    public static let int64Array = Self(rawValue: 1030)

    /// An array of UInt64 values.
    public static let uint64Array = Self(rawValue: 1031)

    /// An array of Single values.
    public static let singleArray = Self(rawValue: 1032)

    /// An array of Double values.
    public static let doubleArray = Self(rawValue: 1033)

    /// An array of Char values.
    public static let char16Array = Self(rawValue: 1034)

    /// An array of Boolean values.
    public static let booleanArray = Self(rawValue: 1035)

    /// An array of String values.
    public static let stringArray = Self(rawValue: 1036)

    /// An array of **Inspectable** values.
    public static let inspectableArray = Self(rawValue: 1037)

    /// An array of DateTime values.
    public static let dateTimeArray = Self(rawValue: 1038)

    /// An array of TimeSpan values.
    public static let timeSpanArray = Self(rawValue: 1039)

    /// An array of Guid values.
    public static let guidArray = Self(rawValue: 1040)

    /// An array of Point structures.
    public static let pointArray = Self(rawValue: 1041)

    /// An array of Size structures.
    public static let sizeArray = Self(rawValue: 1042)

    /// An array of Rect structures.
    public static let rectArray = Self(rawValue: 1043)

    /// An array of an unspecified type.
    public static let otherTypeArray = Self(rawValue: 1044)
}

/// Contains number values that represent the location and size of a rectangle.
public struct WindowsFoundation_Rect: Hashable, Codable {
    /// The x-coordinate of the upper-left corner of the rectangle.
    public var x: Swift.Float/// The y-coordinate of the upper-left corner of the rectangle.
    public var y: Swift.Float/// The width of the rectangle, in pixels.
    public var width: Swift.Float/// The height of the rectangle, in pixels.
    public var height: Swift.Float

    public init() {
        self.x = 0
        self.y = 0
        self.width = 0
        self.height = 0
    }

    public init(x: Swift.Float, y: Swift.Float, width: Swift.Float, height: Swift.Float) {
        self.x = x
        self.y = y
        self.width = width
        self.height = height
    }
}

/// Represents number values that specify a height and width.
public struct WindowsFoundation_Size: Hashable, Codable {
    /// The width.
    public var width: Swift.Float/// The height.
    public var height: Swift.Float

    public init() {
        self.width = 0
        self.height = 0
    }

    public init(width: Swift.Float, height: Swift.Float) {
        self.width = width
        self.height = height
    }
}

/// Represents a time interval as a signed 64-bit integer value.
public struct WindowsFoundation_TimeSpan: Hashable, Codable {
    /// A time period expressed in 100-nanosecond units.
    public var duration: Swift.Int64

    public init() {
        self.duration = 0
    }

    public init(duration: Swift.Int64) {
        self.duration = duration
    }
}

/// Represents a method that handles general events.
/// - Parameter sender: The event source.
/// - Parameter args: The event data. If there is no event data, this parameter will be null.
public typealias WindowsFoundation_TypedEventHandler<TSender, TResult> = (TSender, TResult) throws -> Swift.Void