// Generated by swift-winrt
// swiftlint:disable all

import CWindowsFoundation
import WindowsRuntime
import struct Foundation.UUID

/// Supports asynchronous actions and operations. IAsyncInfo is a base interface for IAsyncAction, IAsyncActionWithProgress<TProgress>, IAsyncOperation<TResult> and IAsyncOperationWithProgress<TResult,TProgress>, each of which support combinations of return type and progress for an asynchronous method.
public protocol WindowsFoundation_IAsyncInfoProtocol: IInspectableProtocol {
    /// Gets a string that describes an error condition of the asynchronous operation.
    /// - Returns: The error string.
    var errorCode: COM.HResult { get throws }

    /// Gets the handle of the asynchronous operation.
    /// - Returns: The handle of the asynchronous operation.
    var id: Swift.UInt32 { get throws }

    /// Gets a value that indicates the status of the asynchronous operation.
    /// - Returns: The status of the operation, as a value of the enumeration. A value of **Completed** indicates that the method has returned. The **Started** value represents a transition state before any of the other 3 final results (**Completed**, **Error**, **Canceled**) can be determined by the method's invocation.
    var status: WindowsFoundation_AsyncStatus { get throws }

    /// Cancels the asynchronous operation.
    func cancel() throws

    /// Closes the asynchronous operation.
    func close() throws
}

/// Supports asynchronous actions and operations. IAsyncInfo is a base interface for IAsyncAction, IAsyncActionWithProgress<TProgress>, IAsyncOperation<TResult> and IAsyncOperationWithProgress<TResult,TProgress>, each of which support combinations of return type and progress for an asynchronous method.
public typealias WindowsFoundation_IAsyncInfo = any WindowsFoundation_IAsyncInfoProtocol

public enum WindowsFoundation_IAsyncInfoProjection: WinRTTwoWayProjection {
    public typealias SwiftObject = WindowsFoundation_IAsyncInfo
    public typealias COMInterface = CWindowsFoundation.__x_ABI_CWindows_CFoundation_CIAsyncInfo
    public typealias COMVirtualTable = CWindowsFoundation.__x_ABI_CWindows_CFoundation_CIAsyncInfoVtbl

    public static let iid = IID(0x00000036, 0x0000, 0x0000, 0xC000, 0x000000000046)

    public static var virtualTablePointer: COMVirtualTablePointer {
        fatalError("Not implemented: \(#function)")
    }

    public static let runtimeClassName = "Windows.Foundation.IAsyncInfo"

    public static func toSwift(transferringRef comPointer: COMPointer) -> SwiftObject {
        toSwift(transferringRef: comPointer, implementation: Implementation.self)
    }

    public static func toCOM(_ object: SwiftObject) throws -> COMPointer {
        try toCOM(object, implementation: Implementation.self)
    }

    private final class Implementation: WinRTImport<WindowsFoundation_IAsyncInfoProjection>, WindowsFoundation_IAsyncInfoProtocol {
        // Windows.Foundation.IAsyncInfo
        public var errorCode: COM.HResult {
            get throws {
                var _result: CWindowsFoundation.HRESULT = S_OK
                try HResult.throwIfFailed(comPointer.pointee.lpVtbl.pointee.get_ErrorCode(comPointer, &_result))
                return COM.HResultProjection.toSwift(_result)
            }
        }

        public var id: Swift.UInt32 {
            get throws {
                var _result: UINT32 = 0
                try HResult.throwIfFailed(comPointer.pointee.lpVtbl.pointee.get_Id(comPointer, &_result))
                return _result
            }
        }

        public var status: WindowsFoundation_AsyncStatus {
            get throws {
                var _result: __x_ABI_CWindows_CFoundation_CAsyncStatus = WindowsFoundation_AsyncStatus.abiDefaultValue
                try HResult.throwIfFailed(comPointer.pointee.lpVtbl.pointee.get_Status(comPointer, &_result))
                return WindowsFoundation_AsyncStatus.toSwift(_result)
            }
        }

        public func cancel() throws {
            try HResult.throwIfFailed(comPointer.pointee.lpVtbl.pointee.Cancel(comPointer))
        }

        public func close() throws {
            try HResult.throwIfFailed(comPointer.pointee.lpVtbl.pointee.Close(comPointer))
        }
    }
}