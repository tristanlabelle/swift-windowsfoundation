// Generated by swift-winrt
// swiftlint:disable all

import CWindowsFoundation
import WindowsRuntime
import struct Foundation.UUID

extension WindowsFoundationCollections_IMapProjection {
    public final class String_Object: WinRTProjectionBase<String_Object>, WinRTProjection, WindowsFoundationCollections_IMapProtocol {
        public typealias SwiftObject = WindowsFoundationCollections_IMap<Swift.String, WindowsRuntime.IInspectable?>
        public typealias COMInterface = CWindowsFoundation.__FIMap_2_HSTRING_IInspectable
        public typealias COMVirtualTable = CWindowsFoundation.__FIMap_2_HSTRING_IInspectableVtbl

        public static let iid = IID(0x1B0D3570, 0x0877, 0x5EC2, 0x8A2C, 0x3B9539506ACA)
        public static let runtimeClassName = "Windows.Foundation.Collections.IMap`2<String, Object>"

        public typealias T = WindowsFoundationCollections_IKeyValuePair<Swift.String, WindowsRuntime.IInspectable?>?

        // Windows.Foundation.Collections.IMap`2<String, Object>
        public var size: Swift.UInt32 {
            get throws {
                var _result: UINT32 = 0
                try HResult.throwIfFailed(comPointer.pointee.lpVtbl.pointee.get_Size(comPointer, &_result))
                return _result
            }
        }

        public func lookup(_ key: Swift.String) throws -> WindowsRuntime.IInspectable? {
            var key = try WindowsRuntime.HStringProjection.toABI(key)
            defer { WindowsRuntime.HStringProjection.release(&key) }
            var _result: IInspectableProjection.COMPointer? = nil
            try HResult.throwIfFailed(comPointer.pointee.lpVtbl.pointee.Lookup(comPointer, key, &_result))
            return WindowsRuntime.IInspectableProjection.toSwift(consuming: &_result)
        }

        public func hasKey(_ key: Swift.String) throws -> Swift.Bool {
            var key = try WindowsRuntime.HStringProjection.toABI(key)
            defer { WindowsRuntime.HStringProjection.release(&key) }
            var _result: boolean = 0
            try HResult.throwIfFailed(comPointer.pointee.lpVtbl.pointee.HasKey(comPointer, key, &_result))
            return COM.BooleanProjection.toSwift(_result)
        }

        public func getView() throws -> WindowsFoundationCollections_IMapView<Swift.String, WindowsRuntime.IInspectable?>? {
            var _result: UnsafeMutablePointer<__FIMapView_2_HSTRING_IInspectable>? = nil
            try HResult.throwIfFailed(comPointer.pointee.lpVtbl.pointee.GetView(comPointer, &_result))
            return WindowsFoundationCollections_IMapViewProjection.String_Object.toSwift(consuming: &_result)
        }

        public func insert(_ key: Swift.String, _ value: WindowsRuntime.IInspectable?) throws -> Swift.Bool {
            var key = try WindowsRuntime.HStringProjection.toABI(key)
            defer { WindowsRuntime.HStringProjection.release(&key) }
            var value = try WindowsRuntime.IInspectableProjection.toABI(value)
            defer { WindowsRuntime.IInspectableProjection.release(&value) }
            var _result: boolean = 0
            try HResult.throwIfFailed(comPointer.pointee.lpVtbl.pointee.Insert(comPointer, key, value, &_result))
            return COM.BooleanProjection.toSwift(_result)
        }

        public func remove(_ key: Swift.String) throws {
            var key = try WindowsRuntime.HStringProjection.toABI(key)
            defer { WindowsRuntime.HStringProjection.release(&key) }
            try HResult.throwIfFailed(comPointer.pointee.lpVtbl.pointee.Remove(comPointer, key))
        }

        public func clear() throws {
            try HResult.throwIfFailed(comPointer.pointee.lpVtbl.pointee.Clear(comPointer))
        }

        // Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Object>>
        private var _iiterable: UnsafeMutablePointer<__FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable>! = nil

        private func _getIIterable() throws -> UnsafeMutablePointer<__FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable> {
            let iid = IID(0xFE2F3D47, 0x5D47, 0x5499, 0x8374, 0x430C7CDA0204)
            _iiterable = try _queryInterfacePointer(iid).cast(to: __FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable.self)
            return _iiterable
        }

        public func first() throws -> WindowsFoundationCollections_IIterator<WindowsFoundationCollections_IKeyValuePair<Swift.String, WindowsRuntime.IInspectable?>?>? {
            let _this = try _getIIterable()
            var _result: UnsafeMutablePointer<__FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable>? = nil
            try HResult.throwIfFailed(_this.pointee.lpVtbl.pointee.First(_this, &_result))
            return WindowsFoundationCollections_IIteratorProjection.IKeyValuePair_String_Object.toSwift(consuming: &_result)
        }

        deinit {
            if let _iiterable { IUnknownPointer.release(_iiterable) }
        }
    }
}